// data-importer.js
const { Client } = require('pg');
const fs = require('fs');
const csv = require('csv-parser');
const path = require('path');

class ProcurementDataImporter {
    constructor() {
        this.client = new Client({
            user: 'store_app1',
            host: 'localhost',
            database: 'template0',
            password: '1234',
            port: 5432,
        });
        
        this.stats = {
            categories: 0,
            products: 0,
            procurements: 0,
            procurement_items: 0,
            templates: 0,
            template_products: 0
        };
    }

    async connect() {
        await this.client.connect();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    }

    async disconnect() {
        await this.client.end();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–∫—Ä—ã—Ç–æ');
    }

    async disableConstraints() {
        await this.client.query("SET session_replication_role = 'replica';");
    }

    async enableConstraints() {
        await this.client.query("SET session_replication_role = 'origin';");
    }

    async importCategories() {
        console.log('üìÅ –ò–º–ø–æ—Ä—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
        
        const templates = JSON.parse(fs.readFileSync('procurement_templates.json', 'utf8'));
        const categories = [];

        for (const [templateKey, templateData] of Object.entries(templates)) {
            categories.push([
                templateKey, // –ò—Å–ø–æ–ª—å–∑—É–µ–º templateKey –∫–∞–∫ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                null,
                templateData.name,
                `–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–∑ ${templateData.name}`,
                templateData.keywords || [],
                1
            ]);
        }

        const query = `
            INSERT INTO categories (category_id, parent_category_id, name, description, keywords, level) 
            VALUES ($1, $2, $3, $4, $5, $6)
        `;

        for (const category of categories) {
            await this.client.query(query, category);
        }

        this.stats.categories = categories.length;
        console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
    }

    async importProducts() {
        console.log('üìÅ –ò–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤...');
        
        return new Promise((resolve, reject) => {
            const products = [];
            let batchCount = 0;

            fs.createReadStream('344608_–°–¢–ï.csv')
                .pipe(csv())
                .on('data', (row) => {
                    const productId = row.product_id || row.id;
                    if (!productId) return;

                    products.push([
                        productId,
                        row.name || row.product_name || `–¢–æ–≤–∞—Ä ${productId}`,
                        row.description || null,
                        row.category_id || null,
                        row.manufacturer || null,
                        row.unit_of_measure || null,
                        row.specifications ? JSON.parse(row.specifications) : null,
                        parseFloat(row.average_price) || null,
                        true,
                        'catalog'
                    ]);

                    // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–∞—á–∫–∞–º–∏ –ø–æ 1000 –∑–∞–ø–∏—Å–µ–π
                    if (products.length >= 1000) {
                        this.insertProductBatch([...products]);
                        products.length = 0;
                        batchCount++;
                        console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${batchCount * 1000} —Ç–æ–≤–∞—Ä–æ–≤...`);
                    }
                })
                .on('end', async () => {
                    // –û—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–ø–∏—Å–∏
                    if (products.length > 0) {
                        await this.insertProductBatch(products);
                        batchCount++;
                    }
                    
                    this.stats.products = batchCount * 1000 + products.length;
                    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${this.stats.products} —Ç–æ–≤–∞—Ä–æ–≤`);
                    resolve();
                })
                .on('error', reject);
        });
    }

    async insertProductBatch(products) {
        const values = products.map((_, index) => {
            const offset = index * 10;
            return `($${offset + 1}, $${offset + 2}, $${offset + 3}, $${offset + 4}, $${offset + 5}, $${offset + 6}, $${offset + 7}, $${offset + 8}, $${offset + 9}, $${offset + 10})`;
        }).join(',');

        const query = `
            INSERT INTO products (product_id, name, description, category_id, manufacturer, 
            unit_of_measure, specifications, average_price, is_available, source_system) 
            VALUES ${values}
        `;

        const flatParams = products.flat();
        await this.client.query(query, flatParams);
    }

    async importProcurements() {
        console.log('üìÅ –ò–º–ø–æ—Ä—Ç –∑–∞–∫—É–ø–æ–∫...');
        
        return new Promise((resolve, reject) => {
            const procurements = [];
            const procurementItems = [];
            let procurementCount = 0;

            fs.createReadStream('cleaned_procurement_data.csv')
                .pipe(csv())
                .on('data', (row) => {
                    const procurementId = row.procurement_id || `proc_${procurementCount}`;
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫—É–ø–∫—É
                    procurements.push([
                        procurementId,
                        '11111111-1111-1111-1111-111111111111', // test user
                        row.procurement_name || `–ó–∞–∫—É–ø–∫–∞ ${procurementCount}`,
                        parseFloat(row.estimated_price) || 0,
                        parseFloat(row.estimated_price) || 0,
                        'completed',
                        row.date ? new Date(row.date) : null,
                        row.publication_date ? new Date(row.publication_date) : null,
                        row.organization || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                        row.inn || ''
                    ]);

                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫—É–ø–∫–µ
                    if (row.product_ids) {
                        const productIds = String(row.product_ids).split(',');
                        productIds.forEach(productId => {
                            const cleanProductId = productId.trim();
                            if (cleanProductId && cleanProductId !== 'nan') {
                                const price = parseFloat(row.estimated_price) || 0;
                                const unitPrice = price / productIds.length;
                                
                                procurementItems.push([
                                    procurementId,
                                    cleanProductId,
                                    1,
                                    unitPrice
                                ]);
                            }
                        });
                    }

                    procurementCount++;

                    // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–∞—á–∫–∞–º–∏
                    if (procurements.length >= 500) {
                        this.insertProcurementBatch([...procurements], [...procurementItems]);
                        procurements.length = 0;
                        procurementItems.length = 0;
                        console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${procurementCount} –∑–∞–∫—É–ø–æ–∫...`);
                    }
                })
                .on('end', async () => {
                    // –û—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–ø–∏—Å–∏
                    if (procurements.length > 0) {
                        await this.insertProcurementBatch(procurements, procurementItems);
                    }
                    
                    this.stats.procurements = procurementCount;
                    this.stats.procurement_items = procurementItems.length;
                    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${procurementCount} –∑–∞–∫—É–ø–æ–∫`);
                    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${procurementItems.length} –ø–æ–∑–∏—Ü–∏–π –≤ –∑–∞–∫—É–ø–∫–∞—Ö`);
                    resolve();
                })
                .on('error', reject);
        });
    }

    async insertProcurementBatch(procurements, procurementItems) {
        // –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–∫—É–ø–∫–∏
        if (procurements.length > 0) {
            const procurementValues = procurements.map((_, index) => {
                const offset = index * 10;
                return `($${offset + 1}, $${offset + 2}, $${offset + 3}, $${offset + 4}, $${offset + 5}, $${offset + 6}, $${offset + 7}, $${offset + 8}, $${offset + 9}, $${offset + 10})`;
            }).join(',');

            const procurementQuery = `
                INSERT INTO procurements (procurement_id, user_id, name, estimated_price, actual_price, 
                status, procurement_date, publication_date, organization_name, organization_inn) 
                VALUES ${procurementValues}
            `;

            await this.client.query(procurementQuery, procurements.flat());
        }

        // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—É–ø–æ–∫
        if (procurementItems.length > 0) {
            const itemValues = procurementItems.map((_, index) => {
                const offset = index * 4;
                return `($${offset + 1}, $${offset + 2}, $${offset + 3}, $${offset + 4})`;
            }).join(',');

            const itemQuery = `
                INSERT INTO procurement_items (procurement_id, product_id, quantity, unit_price) 
                VALUES ${itemValues}
            `;

            await this.client.query(itemQuery, procurementItems.flat());
        }
    }

    async importTemplates() {
        console.log('üìÅ –ò–º–ø–æ—Ä—Ç —à–∞–±–ª–æ–Ω–æ–≤...');
        
        const templates = JSON.parse(fs.readFileSync('procurement_templates.json', 'utf8'));
        const templatesData = [];
        const templateProductsData = [];

        for (const [templateKey, templateData] of Object.entries(templates)) {
            // –®–∞–±–ª–æ–Ω—ã
            templatesData.push([
                templateKey,
                templateData.name,
                `–®–∞–±–ª–æ–Ω ${templateData.name}`,
                templateData.size_range || '',
                templateData.keywords || [],
                templateData.sample_size || 0,
                templateData.avg_products_per_procurement || 0,
                templateData.avg_price || 0
            ]);

            // –¢–æ–≤–∞—Ä—ã –≤ —à–∞–±–ª–æ–Ω–∞—Ö
            if (templateData.typical_products) {
                templateData.typical_products.forEach((productId, position) => {
                    const frequency = templateData.product_frequencies?.[productId] || 0;
                    templateProductsData.push([
                        templateKey,
                        productId,
                        frequency,
                        position
                    ]);
                });
            }
        }

        // –í—Å—Ç–∞–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω—ã
        const templateQuery = `
            INSERT INTO procurement_templates (template_id, name, description, size_range, 
            keywords, sample_size, avg_products_count, avg_price) 
            VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
        `;

        for (const template of templatesData) {
            await this.client.query(templateQuery, template);
        }

        // –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã —à–∞–±–ª–æ–Ω–æ–≤
        if (templateProductsData.length > 0) {
            const productValues = templateProductsData.map((_, index) => {
                const offset = index * 4;
                return `($${offset + 1}, $${offset + 2}, $${offset + 3}, $${offset + 4})`;
            }).join(',');

            const productQuery = `
                INSERT INTO template_products (template_id, product_id, frequency, position) 
                VALUES ${productValues}
            `;

            await this.client.query(productQuery, templateProductsData.flat());
        }

        this.stats.templates = templatesData.length;
        this.stats.template_products = templateProductsData.length;
        console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${templatesData.length} —à–∞–±–ª–æ–Ω–æ–≤`);
        console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${templateProductsData.length} —Ç–æ–≤–∞—Ä–æ–≤ –≤ —à–∞–±–ª–æ–Ω–∞—Ö`);
    }

    async createTestUser() {
        console.log('üë§ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        
        await this.client.query(`
            INSERT INTO users (user_id, email, password_hash, company_name) 
            VALUES ('11111111-1111-1111-1111-111111111111', 'test@company.ru', 'hash', '–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è')
            ON CONFLICT (user_id) DO NOTHING;
        `);
    }

    printStats() {
        console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ú–ü–û–†–¢–ê:');
        console.log('='.repeat(40));
        console.log(`–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:           ${this.stats.categories.toLocaleString()}`);
        console.log(`–¢–æ–≤–∞—Ä—ã:              ${this.stats.products.toLocaleString()}`);
        console.log(`–ó–∞–∫—É–ø–∫–∏:             ${this.stats.procurements.toLocaleString()}`);
        console.log(`–ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—É–ø–æ–∫:     ${this.stats.procurement_items.toLocaleString()}`);
        console.log(`–®–∞–±–ª–æ–Ω—ã:             ${this.stats.templates.toLocaleString()}`);
        console.log(`–¢–æ–≤–∞—Ä—ã –≤ —à–∞–±–ª–æ–Ω–∞—Ö:   ${this.stats.template_products.toLocaleString()}`);
        console.log('='.repeat(40));
    }

    async importAll() {
        try {
            await this.connect();
            await this.disableConstraints();
            await this.createTestUser();

            console.log('üöÄ –ù–ê–ß–ê–õ–û –ò–ú–ü–û–†–¢–ê –î–ê–ù–ù–´–•...\n');

            await this.importCategories();
            await this.importProducts();
            await this.importProcurements();
            await this.importTemplates();

            await this.enableConstraints();
            this.printStats();

            console.log('\nüéâ –í–°–ï –î–ê–ù–ù–´–ï –£–°–ü–ï–®–ù–û –ò–ú–ü–û–†–¢–ò–†–û–í–ê–ù–´!');

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ:', error);
            throw error;
        } finally {
            await this.disconnect();
        }
    }
}

// –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞
async function main() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    const requiredFiles = [
        'procurement_templates.json',
        '344608_–°–¢–ï.csv', 
        'cleaned_procurement_data.csv'
    ];

    for (const file of requiredFiles) {
        if (!fs.existsSync(file)) {
            console.error(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${file}`);
            console.log('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö:');
            console.log('- procurement_templates.json');
            console.log('- 344608_–°–¢–ï.csv');
            console.log('- cleaned_procurement_data.csv');
            process.exit(1);
        }
    }

    const importer = new ProcurementDataImporter();
    await importer.importAll();
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    main().catch(console.error);
}

module.exports = ProcurementDataImporter;