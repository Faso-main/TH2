// analyze-procurements.js
const fs = require('fs');
const csv = require('csv-parser');

function analyzeProcurements(filename) {
    console.log(`üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª –∑–∞–∫—É–ø–æ–∫: ${filename}`);
    console.log('='.repeat(60));
    
    let rowCount = 0;
    let headers = [];
    let sampleData = [];

    fs.createReadStream(filename)
        .pipe(csv({
            headers: false, // –°–Ω–∞—á–∞–ª–∞ —á–∏—Ç–∞–µ–º –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            skipEmptyLines: true
        }))
        .on('headers', (fileHeaders) => {
            headers = fileHeaders;
            console.log('üìã –ù–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏:');
            headers.forEach((header, index) => {
                console.log(`   –ö–æ–ª–æ–Ω–∫–∞ ${index}: "${header}"`);
            });
        })
        .on('data', (row) => {
            rowCount++;
            if (rowCount <= 10) { // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                sampleData.push(row);
            }
            
            if (rowCount <= 3) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥—Ä–æ–±–Ω–æ
                console.log(`\nüìù –°—Ç—Ä–æ–∫–∞ ${rowCount}:`);
                Object.keys(row).forEach(key => {
                    console.log(`   –ö–æ–ª–æ–Ω–∫–∞ ${key}: "${row[key]}"`);
                });
            }
        })
        .on('end', () => {
            console.log('\n' + '='.repeat(60));
            console.log(`üìä –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ: ${rowCount}`);
            console.log(`üìä –í—Å–µ–≥–æ –∫–æ–ª–æ–Ω–æ–∫: ${headers.length}`);
            
            // –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            console.log('\nüîé –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:');
            if (sampleData.length > 0) {
                const firstRow = sampleData[0];
                
                // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –∫–æ–ª–æ–Ω–∫—É - –≤–æ–∑–º–æ–∂–Ω–æ ID –∑–∞–∫—É–ø–∫–∏
                if (firstRow['0']) {
                    console.log(`   –ö–æ–ª–æ–Ω–∫–∞ 0 (ID –∑–∞–∫—É–ø–∫–∏): "${firstRow['0'].substring(0, 50)}..."`);
                }
                
                // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
                Object.keys(firstRow).forEach(key => {
                    const value = firstRow[key];
                    if (value && key !== '0') {
                        console.log(`   –ö–æ–ª–æ–Ω–∫–∞ ${key}: "${value.substring(0, 100)}..."`);
                    }
                });
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å...');
            if (sampleData.length > 0) {
                const firstLine = Object.values(sampleData[0]).join('');
                if (firstLine.includes(';')) {
                    console.log('   ‚úÖ –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π (;)');
                } else if (firstLine.includes(',')) {
                    console.log('   ‚úÖ –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: –∑–∞–ø—è—Ç–∞—è (,)');
                } else {
                    console.log('   ‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å');
                }
            }
        })
        .on('error', (error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error.message);
        });
}

// –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
function quickCheck(filename) {
    console.log(`\nüîç –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞: ${filename}`);
    console.log('='.repeat(40));
    
    try {
        const data = fs.readFileSync(filename, 'utf8');
        const lines = data.split('\n');
        
        console.log(`üìä –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: ${lines.length}`);
        console.log(`üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${(data.length / 1024 / 1024).toFixed(2)} MB`);
        
        console.log('\nüìù –ü–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏:');
        lines.slice(0, 3).forEach((line, index) => {
            console.log(`   –°—Ç—Ä–æ–∫–∞ ${index + 1}: ${line.substring(0, 200)}...`);
        });
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        if (lines.length > 0) {
            const firstLine = lines[0];
            console.log('\nüîé –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ (–≤–æ–∑–º–æ–∂–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏):');
            console.log(`   ${firstLine}`);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
const filename = 'cleaned_procurement_data.csv';

if (fs.existsSync(filename)) {
    analyzeProcurements(filename);
    quickCheck(filename);
} else {
    console.log('‚ùå –§–∞–π–ª –∑–∞–∫—É–ø–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω:', filename);
    console.log('üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã:');
    fs.readdirSync('.').forEach(file => {
        if (file.includes('procurement') || file.includes('–∑–∞–∫—É–ø')) {
            console.log(`   - ${file}`);
        }
    });
}