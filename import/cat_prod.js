// restore-and-categorize.js
const { Client } = require('pg');
const fs = require('fs');

class DataRestorer {
    constructor() {
        this.client = new Client({
            user: 'store_app1',
            host: 'localhost',
            database: 'pc_db',
            password: '1234',
            port: 5432,
        });
    }

    async connect() {
        await this.client.connect();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    }

    async disconnect() {
        await this.client.end();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–∫—Ä—ã—Ç–æ');
    }

    async checkData() {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î...');
        
        const tables = {
            'products': 'SELECT COUNT(*) as count FROM products',
            'categories': 'SELECT COUNT(*) as count FROM categories', 
            'procurements': 'SELECT COUNT(*) as count FROM procurements',
            'procurement_items': 'SELECT COUNT(*) as count FROM procurement_items'
        };
        
        const results = {};
        for (const [table, query] of Object.entries(tables)) {
            const result = await this.client.query(query);
            const count = parseInt(result.rows[0].count);
            results[table] = count;
            console.log(`   ${table}: ${count.toLocaleString()} –∑–∞–ø–∏—Å–µ–π`);
        }
        
        return results;
    }

    async importData() {
        console.log('\nüîÑ –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ ProcurementDataImporter...');
        
        try {
            // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—à –∫–ª–∞—Å—Å
            const { ProcurementDataImporter } = require('./set_prod.js');
            const importer = new ProcurementDataImporter();
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç –Ω–æ —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            await importer.connect();
            await importer.disableConstraints();
            await importer.createTestUser();
            
            console.log('\nüì• –ò–º–ø–æ—Ä—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
            await importer.importCategories();
            
            console.log('\nüì• –ò–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤...');
            await importer.importProducts();
            
            await importer.enableConstraints();
            await importer.disconnect();
            
            console.log('‚úÖ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error.message);
            throw error;
        }
    }

    async restoreIfNeeded() {
        await this.connect();
        
        const data = await this.checkData();
        
        // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –º–∞–ª–æ –∏–ª–∏ –Ω–µ—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç
        if (data.products < 1000) {
            console.log(`\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º–∞–ª–æ —Ç–æ–≤–∞—Ä–æ–≤ (${data.products}), –∑–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç...`);
            await this.importData();
        } else {
            console.log('\n‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ');
        }
        
        await this.disconnect();
        return data.products > 1000; // true –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å
    }
}

class CategoryManager {
    constructor() {
        this.client = new Client({
            user: 'store_app1',
            host: 'localhost',
            database: 'pc_db',
            password: '1234',
            port: 5432,
        });
        
        this.categoryMap = new Map();
        this.keywordToCategory = new Map();
    }

    async connect() {
        await this.client.connect();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    }

    async disconnect() {
        await this.client.end();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–∫—Ä—ã—Ç–æ');
    }

    loadCategoryHierarchy() {
        console.log('üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
        try {
            const flatCategories = JSON.parse(fs.readFileSync('flat_category_hierarchy.json', 'utf8'));
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${flatCategories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
            return flatCategories;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error.message);
            throw error;
        }
    }

    generateDeterministicUUID(key) {
        const crypto = require('crypto');
        const hash = crypto.createHash('md5').update(key).digest('hex');
        return `${hash.substring(0, 8)}-${hash.substring(8, 12)}-${hash.substring(12, 16)}-${hash.substring(16, 20)}-${hash.substring(20, 32)}`;
    }

    async importCategories(flatCategories) {
        console.log('üìÅ –ò–º–ø–æ—Ä—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –ë–î...');
        
        try {
            let importedCount = 0;
            let updatedCount = 0;
            
            for (const categoryData of flatCategories) {
                const categoryPath = categoryData.category_path;
                const parts = categoryPath.split(' -> ');
                const categoryName = parts[parts.length - 1];
                const level = categoryData.level;
                
                const categoryId = this.generateDeterministicUUID(categoryPath);
                
                let parentCategoryId = null;
                if (parts.length > 1) {
                    const parentPath = parts.slice(0, -1).join(' -> ');
                    parentCategoryId = this.generateDeterministicUUID(parentPath);
                }
                
                this.categoryMap.set(categoryPath, categoryId);
                
                if (categoryData.keywords) {
                    categoryData.keywords.forEach(keyword => {
                        this.keywordToCategory.set(keyword.toLowerCase(), categoryId);
                    });
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                const checkResult = await this.client.query(
                    'SELECT category_id FROM categories WHERE category_id = $1',
                    [categoryId]
                );
                
                if (checkResult.rows.length === 0) {
                    const query = `
                        INSERT INTO categories (category_id, parent_category_id, name, description, keywords, level) 
                        VALUES ($1, $2, $3, $4, $5, $6)
                    `;
                    
                    await this.client.query(query, [
                        categoryId,
                        parentCategoryId,
                        categoryName,
                        `–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${categoryPath}`,
                        categoryData.keywords || [],
                        level
                    ]);
                    importedCount++;
                } else {
                    const query = `
                        UPDATE categories 
                        SET parent_category_id = $1, name = $2, description = $3, keywords = $4, level = $5
                        WHERE category_id = $6
                    `;
                    
                    await this.client.query(query, [
                        parentCategoryId,
                        categoryName,
                        `–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${categoryPath}`,
                        categoryData.keywords || [],
                        level,
                        categoryId
                    ]);
                    updatedCount++;
                }
            }
            
            console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${importedCount} –Ω–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
            console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
            console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${this.keywordToCategory.size} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤`);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error.message);
            throw error;
        }
    }

    findCategoryForProduct(productName) {
        if (!productName) return null;
        
        const nameLower = productName.toLowerCase();
        
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ç–æ—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º
        for (const [keyword, categoryId] of this.keywordToCategory.entries()) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Å–ª–æ–≤ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
            const regex = new RegExp(`\\b${keyword}\\b`, 'i');
            if (regex.test(productName)) {
                return categoryId;
            }
        }
        
        // –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º
        for (const [keyword, categoryId] of this.keywordToCategory.entries()) {
            if (nameLower.includes(keyword)) {
                return categoryId;
            }
        }
        
        return null;
    }

    async categorizeProducts() {
        console.log('üè∑Ô∏è –ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–∞–º...');
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Ç–æ–≤–∞—Ä—ã
            const result = await this.client.query(`
                SELECT product_id, name, category_id 
                FROM products 
                ORDER BY product_id
            `);
            
            console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${result.rows.length.toLocaleString()} —Ç–æ–≤–∞—Ä–æ–≤ –≤—Å–µ–≥–æ`);
            
            let newCategoriesCount = 0;
            let updatedCategoriesCount = 0;
            const batchSize = 500;
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á–∞–º–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            for (let i = 0; i < result.rows.length; i += batchSize) {
                const batch = result.rows.slice(i, i + batchSize);
                const updates = [];
                
                for (const product of batch) {
                    const newCategoryId = this.findCategoryForProduct(product.name);
                    
                    if (newCategoryId && product.category_id !== newCategoryId) {
                        updates.push({
                            productId: product.product_id,
                            categoryId: newCategoryId,
                            hadCategory: !!product.category_id
                        });
                    }
                }
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –±–∞—Ç—á–∞
                if (updates.length > 0) {
                    const updateQuery = `
                        UPDATE products 
                        SET category_id = $1 
                        WHERE product_id = $2
                    `;
                    
                    for (const update of updates) {
                        await this.client.query(updateQuery, [update.categoryId, update.productId]);
                        
                        if (update.hadCategory) {
                            updatedCategoriesCount++;
                        } else {
                            newCategoriesCount++;
                        }
                    }
                }
                
                // –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5000 —Ç–æ–≤–∞—Ä–æ–≤
                if ((i + batchSize) % 5000 === 0) {
                    console.log(`   ... –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${Math.min(i + batchSize, result.rows.length).toLocaleString()} —Ç–æ–≤–∞—Ä–æ–≤`);
                }
            }
            
            console.log(`üéâ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏—Å–≤–æ–µ–Ω—ã –¥–ª—è ${newCategoriesCount.toLocaleString()} –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤`);
            console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è ${updatedCategoriesCount.toLocaleString()} —Ç–æ–≤–∞—Ä–æ–≤`);
            
            // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            await this.showFinalStats();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error.message);
            throw error;
        }
    }

    async showFinalStats() {
        console.log('\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
        console.log('='.repeat(50));
        
        const stats = await this.client.query(`
            SELECT 
                COUNT(*) as total_products,
                COUNT(category_id) as with_category,
                COUNT(*) - COUNT(category_id) as without_category
            FROM products
        `);
        
        const row = stats.rows[0];
        console.log(`üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${parseInt(row.total_products).toLocaleString()}`);
        console.log(`‚úÖ –° –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏: ${parseInt(row.with_category).toLocaleString()}`);
        console.log(`‚ùå –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${parseInt(row.without_category).toLocaleString()}`);
        console.log(`üìà –ü—Ä–æ—Ü–µ–Ω—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏: ${((row.with_category / row.total_products) * 100).toFixed(1)}%`);
        
        // –¢–æ–ø-10 –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        const topCategories = await this.client.query(`
            SELECT c.name, COUNT(p.product_id) as product_count
            FROM categories c
            JOIN products p ON c.category_id = p.category_id
            GROUP BY c.category_id, c.name
            ORDER BY product_count DESC
            LIMIT 10
        `);
        
        console.log('\nüèÜ –¢–æ–ø-10 –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–æ–≤:');
        topCategories.rows.forEach((category, index) => {
            console.log(`   ${index + 1}. ${category.name}: ${parseInt(category.product_count).toLocaleString()} —Ç–æ–≤–∞—Ä–æ–≤`);
        });
        
        // –ü—Ä–∏–º–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
        const examples = await this.client.query(`
            SELECT p.name, c.name as category_name
            FROM products p
            JOIN categories c ON p.category_id = c.category_id
            WHERE LENGTH(p.name) > 10
            ORDER BY RANDOM()
            LIMIT 5
        `);
        
        console.log('\nüîç –ü—Ä–∏–º–µ—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏:');
        examples.rows.forEach(example => {
            const shortName = example.name.length > 50 ? example.name.substring(0, 47) + '...' : example.name;
            console.log(`   üì¶ "${shortName}"`);
            console.log(`      ‚Üí ${example.category_name}`);
        });
    }

    async execute() {
        const startTime = Date.now();
        
        try {
            await this.connect();
            
            console.log('üöÄ –ó–ê–ü–£–°–ö –ö–ê–¢–ï–ì–û–†–ò–ó–ê–¶–ò–ò...\n');
            
            // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—é
            const flatCategories = this.loadCategoryHierarchy();
            
            // 2. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            await this.importCategories(flatCategories);
            
            // 3. –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞–º
            await this.categorizeProducts();
            
            const duration = ((Date.now() - startTime) / 1000).toFixed(2);
            console.log(`\nüéâ –ö–ê–¢–ï–ì–û–†–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –∑–∞ ${duration} —Å–µ–∫—É–Ω–¥!`);
            
        } catch (error) {
            console.error('üí• –û—à–∏–±–∫–∞:', error.message);
            throw error;
        } finally {
            await this.disconnect();
        }
    }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    console.log('üéØ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–• –ò –ö–ê–¢–ï–ì–û–†–ò–ó–ê–¶–ò–Ø\n');
    
    try {
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        console.log('1. –ü–†–û–í–ï–†–ö–ê –ò –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–•');
        console.log('='.repeat(40));
        const restorer = new DataRestorer();
        const hasData = await restorer.restoreIfNeeded();
        
        if (!hasData) {
            console.log('\n‚ö†Ô∏è  –î–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã –∏ —Å–∫—Ä–∏–ø—Ç—ã –∏–º–ø–æ—Ä—Ç–∞.');
            return;
        }
        
        // 2. –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—é
        console.log('\n2. –ö–ê–¢–ï–ì–û–†–ò–ó–ê–¶–ò–Ø –¢–û–í–ê–†–û–í');
        console.log('='.repeat(40));
        const categorizer = new CategoryManager();
        await categorizer.execute();
        
        console.log('\n‚úÖ –í–°–ï –ó–ê–î–ê–ß–ò –í–´–ü–û–õ–ù–ï–ù–´!');
        console.log('üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å –ø–æ–ª–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–µ–π —Ç–æ–≤–∞—Ä–æ–≤');
        
    } catch (error) {
        console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
        process.exit(1);
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
function validateFiles() {
    const requiredFiles = [
        'flat_category_hierarchy.json',
        'set_prod.js'
    ];

    const missingFiles = requiredFiles.filter(file => !fs.existsSync(file));
    
    if (missingFiles.length > 0) {
        console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã:');
        missingFiles.forEach(file => console.log(`   - ${file}`));
        return false;
    }

    return true;
}

if (require.main === module) {
    if (!validateFiles()) {
        process.exit(1);
    }
    
    main().catch(console.error);
}

module.exports = { DataRestorer, CategoryManager };