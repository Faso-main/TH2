import numpy as np
from collections import defaultdict, Counter
import logging
from typing import List, Dict, Any
import json

logger = logging.getLogger(__name__)

class SmartRecommendationEngine:
    def __init__(self, db_connector):
        self.db = db_connector
        self.config = {
            'weights': {
                'purchase_history': 0.35,      # –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫
                'category_similarity': 0.25,   # –°—Ö–æ–∂–µ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                'price_compatibility': 0.20,   # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ —Ü–µ–Ω–µ
                'popularity': 0.15,            # –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞
                'availability': 0.05           # –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            },
            'min_availability_score': 0.8,     # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            'price_tolerance': 0.3             # –î–æ–ø—É—Å–∫ –ø–æ —Ü–µ–Ω–µ (¬±30%)
        }
        
        # –ö—ç—à –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        self.popular_products = []
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
        self.popular_products = await self.db.get_popular_products(200)
        logger.info(f"üìà Loaded {len(self.popular_products)} popular products")
    
    def _analyze_user_behavior(self, user_procurements: List[Dict]) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        profile = {
            'purchased_products': set(),
            'preferred_categories': Counter(),
            'price_ranges': defaultdict(list),
            'total_spent': 0,
            'avg_price_per_item': 0,
            'category_weights': defaultdict(float)
        }
        
        if not user_procurements:
            return profile
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫
        for procurement in user_procurements:
            product_id = procurement['product_id']
            category = procurement['category_name']
            price = procurement['unit_price'] or procurement['average_price']
            
            profile['purchased_products'].add(product_id)
            profile['preferred_categories'][category] += 1
            profile['price_ranges'][category].append(price)
            profile['total_spent'] += price * procurement.get('quantity', 1)
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É
        total_items = sum(profile['preferred_categories'].values())
        if total_items > 0:
            profile['avg_price_per_item'] = profile['total_spent'] / total_items
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤–µ—Å–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        total_categories = sum(profile['preferred_categories'].values())
        if total_categories > 0:
            for category, count in profile['preferred_categories'].items():
                profile['category_weights'][category] = count / total_categories
        
        logger.info(f"üë§ User profile: {total_items} items, {len(profile['preferred_categories'])} categories, avg price: {profile['avg_price_per_item']:.0f}")
        return profile
    
    def _calculate_purchase_history_score(self, product: Dict, user_profile: Dict) -> float:
        """–°–∫–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫"""
        if not user_profile['purchased_products']:
            return 0.5  # –ë–∞–∑–æ–≤—ã–π —Å–∫–æ—Ä –µ—Å–ª–∏ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–∫—É–ø–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–≤–∞—Ä—ã –∏–∑ —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        product_category = product.get('category_name', '–î—Ä—É–≥–æ–µ')
        category_weight = user_profile['category_weights'].get(product_category, 0)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–∫–æ—Ä –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫—É–ø–∞–ª –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        return min(category_weight * 2.0, 1.0)
    
    def _calculate_category_similarity(self, product: Dict, user_profile: Dict) -> float:
        """–°—Ö–æ–∂–µ—Å—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        product_category = product.get('category_name', '–î—Ä—É–≥–æ–µ')
        
        if not user_profile['preferred_categories']:
            return 0.3  # –ë–∞–∑–æ–≤—ã–π —Å–∫–æ—Ä –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        max_count = max(user_profile['preferred_categories'].values())
        category_count = user_profile['preferred_categories'].get(product_category, 0)
        
        return category_count / max_count if max_count > 0 else 0
    
    def _calculate_price_compatibility(self, product: Dict, user_profile: Dict) -> float:
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ —Ü–µ–Ω–µ"""
        product_price = product.get('average_price', 0)
        user_avg_price = user_profile['avg_price_per_item']
        
        if user_avg_price == 0:
            return 0.5  # –ë–∞–∑–æ–≤—ã–π —Å–∫–æ—Ä –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö
        
        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –±–ª–∏–∑–∫–∞ –∫ –ø—Ä–∏–≤—ã—á–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        price_ratio = min(product_price, user_avg_price) / max(product_price, user_avg_price)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–∫–æ—Ä –µ—Å–ª–∏ —Ü–µ–Ω–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ–ø—É—Å–∫–∞
        tolerance = self.config['price_tolerance']
        if abs(product_price - user_avg_price) <= user_avg_price * tolerance:
            return min(price_ratio + 0.3, 1.0)
        
        return price_ratio
    
    def _calculate_popularity_score(self, product: Dict) -> float:
        """–°–∫–æ—Ä –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞"""
        product_id = product['product_id']
        
        # –ò—â–µ–º —Ç–æ–≤–∞—Ä –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö
        for popular_product in self.popular_products:
            if popular_product['product_id'] == product_id:
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫ (0-1)
                max_purchases = max(p['purchase_count'] for p in self.popular_products) if self.popular_products else 1
                return popular_product['purchase_count'] / max_purchases
        
        return 0.1  # –ë–∞–∑–æ–≤—ã–π —Å–∫–æ—Ä –¥–ª—è –Ω–µ–ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    
    def _calculate_availability_score(self, product: Dict) -> float:
        """–°–∫–æ—Ä –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
        # –í—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –ë–î —É–∂–µ filtered –ø–æ is_available = true
        return 1.0
    
    def _generate_explanation(self, product: Dict, user_profile: Dict, scores: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        explanations = []
        
        if scores['purchase_history'] > 0.7:
            explanations.append("—á–∞—Å—Ç–æ –ø–æ–∫—É–ø–∞–µ—Ç–µ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        elif scores['purchase_history'] > 0.4:
            explanations.append("–ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–∞—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ–∫—É–ø–∫–∏")
        
        if scores['category_similarity'] > 0.6:
            category = product.get('category_name', '—ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
            explanations.append(f"–ø–æ–ø—É–ª—è—Ä–Ω–æ –≤ {category}")
        
        if scores['price_compatibility'] > 0.8:
            explanations.append("–æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ —Ü–µ–Ω–µ")
        elif scores['price_compatibility'] > 0.6:
            explanations.append("–ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –≤–∞—à–µ–º—É –±—é–¥–∂–µ—Ç—É")
        
        if scores['popularity'] > 0.7:
            explanations.append("–ø–æ–ø—É–ª—è—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        
        if explanations:
            return "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º: " + ", ".join(explanations)
        else:
            return "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–∫—É–ø–æ–∫"
    
    async def get_personalized_recommendations(self, user_id: str, limit: int = 15) -> List[Dict]:
        """–£–º–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        
        # 1. –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_procurements = await self.db.get_user_procurements(user_id)
        
        # 2. –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        available_products = await self.db.get_available_products(10000)
        
        # 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_profile = self._analyze_user_behavior(user_procurements)
        
        # 4. –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
        for product in available_products:
            product['category_name'] = await self.db.get_category_name(product['category_id'])
        
        # 5. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = []
        purchased_ids = user_profile['purchased_products']
        
        for product in available_products:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –∫—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
            if product['product_id'] in purchased_ids:
                continue
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∫–æ—Ä–∞
            scores = {
                'purchase_history': self._calculate_purchase_history_score(product, user_profile),
                'category_similarity': self._calculate_category_similarity(product, user_profile),
                'price_compatibility': self._calculate_price_compatibility(product, user_profile),
                'popularity': self._calculate_popularity_score(product),
                'availability': self._calculate_availability_score(product)
            }
            
            # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π —Å–∫–æ—Ä
            total_score = sum(
                scores[factor] * self.config['weights'][factor] 
                for factor in scores
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –µ—Å–ª–∏ —Å–∫–æ—Ä –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞
            if total_score > 0.2:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥
                recommendations.append({
                    'product_id': product['product_id'],
                    'product_name': product['name'],
                    'product_category': product['category_name'],
                    'total_score': round(total_score, 4),
                    'component_scores': {k: round(v, 4) for k, v in scores.items()},
                    'explanation': self._generate_explanation(product, user_profile, scores),
                    'price_range': {
                        'avg': product['average_price'],
                        'min': product['average_price'] * 0.7,
                        'max': product['average_price'] * 1.3,
                        'source': 'database_real'
                    },
                    'in_catalog': True,
                    'is_available': True,
                    'real_data': True
                })
        
        # 6. –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º
        recommendations.sort(key=lambda x: x['total_score'], reverse=True)
        final_recommendations = recommendations[:limit]
        
        logger.info(f"üéØ Generated {len(final_recommendations)} recommendations for user {user_id}")
        logger.info(f"üìä Score range: {final_recommendations[0]['total_score'] if final_recommendations else 0:.3f} - {final_recommendations[-1]['total_score'] if final_recommendations else 0:.3f}")
        
        return final_recommendations