import requests
import json
import jwt
from datetime import datetime

def check_token_details(token: str):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞"""
    print("=" * 60)
    print("–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –¢–û–ö–ï–ù–ê")
    print("=" * 60)
    
    try:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
        decoded = jwt.decode(token, options={"verify_signature": False})
        
        print("üìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¢–û–ö–ï–ù–ï:")
        print(f"üë§ –°—É–±—ä–µ–∫—Ç (sub): {decoded.get('sub')}")
        print(f"üéØ –ö–ª–∏–µ–Ω—Ç (azp): {decoded.get('azp')}")
        print(f"üìä –û–±–ª–∞—Å—Ç—å (scope): {decoded.get('scope')}")
        print(f"üÜî ID —Å–µ—Å—Å–∏–∏: {decoded.get('sid')}")
        print(f"‚è∞ –í—ã–¥–∞–Ω: {datetime.fromtimestamp(decoded.get('auth_time', 0))}")
        print(f"üìÖ –°–æ–∑–¥–∞–Ω: {datetime.fromtimestamp(decoded.get('iat', 0))}")
        print(f"‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: {datetime.fromtimestamp(decoded.get('exp', 0))}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
        exp_time = datetime.fromtimestamp(decoded.get('exp', 0))
        current_time = datetime.now()
        
        if exp_time > current_time:
            print("‚úÖ –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
            return True
        else:
            print("‚ùå –¢–æ–∫–µ–Ω –ø—Ä–æ—Å—Ä–æ—á–µ–Ω")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return False

class MosZakupkiIntegrationTester:
    
    def __init__(self, api_key: str):
        self.base_url = "https://api.zakupki.mos.ru/api/v1"
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Accept': 'application/json',
            'Content-Type': 'application/json',
            'Authorization': f'Bearer {api_key}'
        })

    def test_all_endpoints(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ endpoints"""
        print("\n" + "=" * 60)
        print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ENDPOINTS")
        print("=" * 60)
        
        endpoints_to_test = [
            # –û—Å–Ω–æ–≤–Ω—ã–µ queries
            ("/queries/GetSkus", "–¢–æ–≤–∞—Ä—ã (–°–¢–ï)", {"take": 5}),
            ("/queries/GetContracts", "–ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã", {"take": 5}),
            ("/queries/GetSuppliers", "–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏", {"take": 5}),
            ("/queries/GetTenders", "–ó–∞–∫—É–ø–∫–∏", {"take": 5}),
            ("/queries/GetOffers", "–û—Ñ–µ—Ä—Ç—ã", {"take": 5}),
            ("/queries/GetStatistics", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", {}),
            ("/queries/GetContractStats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤", {}),
            
            # References (—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ - –æ–±—ã—á–Ω–æ –ø—É–±–ª–∏—á–Ω—ã–µ)
            ("/references/GetOkpdReference", "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –û–ö–ü–î2", {}),
            ("/references/GetRegionsReference", "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤", {}),
            ("/references/GetProductionDirectoryReference", "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤", {}),
            ("/references/GetProductionReference", "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø—Ä–æ–¥—É–∫—Ü–∏–∏", {}),
            
            # External queries (–≤–Ω–µ—à–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã)
            ("/queries/GetExternalSkus", "–í–Ω–µ—à–Ω–∏–µ –°–¢–ï", {"take": 5}),
            ("/queries/GetExternalSkuChangeRequests", "–ó–∞—è–≤–∫–∏ –Ω–∞ –°–¢–ï", {"take": 5}),
            
            # –ö–æ–º–∞–Ω–¥—ã
            ("/commands/SyncWithEis", "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –ï–ò–°", {}),
            ("/commands/ProcessIntegrationQueue", "–û—á–µ—Ä–µ–¥—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏", {}),
        ]
        
        available_endpoints = []
        
        for endpoint, description, params in endpoints_to_test:
            url = f"{self.base_url}{endpoint}"
            print(f"\nüîç –¢–µ—Å—Ç: {description}")
            print(f"   URL: {endpoint}")
            
            try:
                response = self.session.post(url, json=params, timeout=10)
                print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
                
                if response.status_code == 200:
                    data = response.json()
                    count = data.get('count', len(data.get('items', [])))
                    print(f"   ‚úÖ –î–û–°–¢–£–ü–ï–ù - –∑–∞–ø–∏—Å–µ–π: {count}")
                    available_endpoints.append((endpoint, description, count))
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
                    filename = f"available_{description.replace(' ', '_').lower()}.json"
                    with open(filename, 'w', encoding='utf-8') as f:
                        json.dump(data, f, ensure_ascii=False, indent=2)
                    print(f"   üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
                    
                elif response.status_code == 400:
                    print(f"   ‚ö†Ô∏è  –¢—Ä–µ–±—É—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
                    available_endpoints.append((endpoint, description, "needs_params"))
                    
                elif response.status_code == 403:
                    print(f"   ‚ùå –î–û–°–¢–£–ü –ó–ê–ü–†–ï–©–ï–ù")
                    
                elif response.status_code == 404:
                    print(f"   ‚ùå ENDPOINT –ù–ï –ù–ê–ô–î–ï–ù")
                    
                elif response.status_code == 401:
                    print(f"   ‚ùå –ù–ï–ê–í–¢–û–†–ò–ó–û–í–ê–ù")
                    
            except requests.exceptions.Timeout:
                print(f"   ‚è∞ –¢–ê–ô–ú–ê–£–¢")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        return available_endpoints

    def get_available_data(self, available_endpoints):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö endpoints"""
        print("\n" + "=" * 60)
        print("–ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –° –î–û–°–¢–£–ü–ù–´–• ENDPOINTS")
        print("=" * 60)
        
        for endpoint, description, count in available_endpoints:
            if count == "needs_params":
                continue
                
            print(f"\nüì• –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: {description}")
            url = f"{self.base_url}{endpoint}"
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö endpoints
                params = {"take": 100, "skip": 0, "withCount": True}
                response = self.session.post(url, json=params, timeout=15)
                
                if response.status_code == 200:
                    data = response.json()
                    total_count = data.get('count', 0)
                    items_count = len(data.get('items', []))
                    
                    print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ: {items_count} –∏–∑ {total_count} –∑–∞–ø–∏—Å–µ–π")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
                    if data.get('items'):
                        self.save_to_csv(data['items'], description)
                        
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

    def save_to_csv(self, data, description):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ CSV"""
        try:
            if data and isinstance(data[0], dict):
                df = pd.DataFrame(data)
                filename = f"{description.replace(' ', '_').lower()}.csv"
                df.to_csv(filename, index=False, encoding='utf-8-sig')
                print(f"   üíæ CSV —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
                print(f"   üìä –ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)[:5]}...")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è CSV: {e}")

def main():
    # –í–∞—à —Ç–æ–∫–µ–Ω
    API_KEY = "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJwbDgxLVYyWUNyQ1V0bmVRTWxxRUNmSVluS1Z3VExnQVIwZXhiTkF1SF9nIn0.eyJleHAiOjIwNzQ4MzM1MTcsImlhdCI6MTc1OTQ3NTIyMCwiYXV0aF90aW1lIjoxNzU5NDczNTE3LCJqdGkiOiIyNThmYTAzZi1jNTk5LTQ5MTUtOWUzYS0yMDdhMmYxOWVmNjYiLCJpc3MiOiJodHRwczovL3pha3Vwa2kubW9zLnJ1L2F1dGgvcmVhbG1zL1BwUmVhbG0iLCJhdWQiOiJJbnRlZ3JhdGlvbkFwcCIsInN1YiI6IjdlMjhiZTU5LWYyNjYtNGNkZi05OWJhLTMzYzJmYTFmZWY4ZSIsInR5cCI6IkJlYXJlciIsImF6cCI6IlBwQXBwIiwic2Vzc2lvbl9zdGF0ZSI6IjNkOTc1N2FhLTNlNjEtNGY5Ni1hNGIzLWE4NjMxNTk3YjVkMiIsInNjb3BlIjoiSW50ZWdyYXRpb25TY29wZSIsInNpZCI6IjNkOTc1N2FhLTNlNjEtNGY5Ni1hNGIzLWE4NjMxNTk3YjVkMiJ9.CREupv9Bav92I17mb62RwVqYIWH2kwaHGL4W9kNDXmvKSvK2jSio1skOGe_UjsmIzTrusEU4h8L9XuPZB-ILBDe3GANNsT4fF5WUWjHWjpeULpSa5Z7SijcPAQ-0S1tX734ysPwfT4N4_bsOzew-h7eMYaxTfH5PvXvI8ht73UCC0m8yKL_pufHt1y7HvjZ6ZpuW4AnyBnQdcmULMS9ufzU6KnH7QkDSiAUF-Xajpe-N2AyWBwdunmMtQ9sSGPPExYVzmqHzKWGdrQuqRmymAyvRfs9Cx12Sf7jpD4-aOwwu7gKfMaE6-2GypETFglGXPr3Y6EEUMpxyTbWljFP-rg"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    if not check_token_details(API_KEY):
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º endpoints
    tester = MosZakupkiIntegrationTester(API_KEY)
    available_endpoints = tester.test_all_endpoints()
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 60)
    print("–ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    if available_endpoints:
        print(f"‚úÖ –î–û–°–¢–£–ü–ù–´–• ENDPOINTS: {len(available_endpoints)}")
        for endpoint, description, count in available_endpoints:
            print(f"   üìç {description}: {endpoint} ({count})")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö endpoints
        tester.get_available_data(available_endpoints)
    else:
        print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö endpoints")
        print("\n–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("1. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤")
        print("2. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ —Ç–æ–∫–µ–Ω —Å scope 'read' –∏–ª–∏ 'public'")
        print("3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ—Ä—Ç–∞–ª–∞")

if __name__ == "__main__":
    main()