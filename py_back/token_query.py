import requests
import json
import jwt
from datetime import datetime
import pandas as pd

def check_token_details(token: str):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞"""
    print("=" * 60)
    print("–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –¢–û–ö–ï–ù–ê")
    print("=" * 60)
    
    try:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
        decoded = jwt.decode(token, options={"verify_signature": False})
        
        print("üìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¢–û–ö–ï–ù–ï:")
        print(f"üë§ –°—É–±—ä–µ–∫—Ç (sub): {decoded.get('sub')}")
        print(f"üéØ –ö–ª–∏–µ–Ω—Ç (azp): {decoded.get('azp')}")
        print(f"üìä –û–±–ª–∞—Å—Ç—å (scope): {decoded.get('scope')}")
        print(f"üÜî ID —Å–µ—Å—Å–∏–∏: {decoded.get('sid')}")
        print(f"‚è∞ –í—ã–¥–∞–Ω: {datetime.fromtimestamp(decoded.get('auth_time', 0))}")
        print(f"üìÖ –°–æ–∑–¥–∞–Ω: {datetime.fromtimestamp(decoded.get('iat', 0))}")
        print(f"‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: {datetime.fromtimestamp(decoded.get('exp', 0))}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
        exp_time = datetime.fromtimestamp(decoded.get('exp', 0))
        current_time = datetime.now()
        
        if exp_time > current_time:
            print("‚úÖ –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
            return True
        else:
            print("‚ùå –¢–æ–∫–µ–Ω –ø—Ä–æ—Å—Ä–æ—á–µ–Ω")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return False

class MosZakupkiAPITester:
    
    def __init__(self, api_key: str):
        self.base_url = "https://api.zakupki.mos.ru/api/v1"
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Accept': 'application/json',
            'Content-Type': 'application/json',
            'Authorization': f'Bearer {api_key}'
        })

    def test_comprehensive_endpoints(self):
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö endpoints"""
        print("\n" + "=" * 60)
        print("–ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ENDPOINTS")
        print("=" * 60)
        
        endpoints_to_test = [
            # –û—Å–Ω–æ–≤–Ω—ã–µ queries - –¥–∞–Ω–Ω—ã–µ
            ("/queries/GetSkus", "–¢–æ–≤–∞—Ä—ã (–°–¢–ï)", {"take": 5, "skip": 0}),
            ("/queries/GetContracts", "–ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã", {"take": 5, "skip": 0}),
            ("/queries/GetSuppliers", "–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏", {"take": 5, "skip": 0}),
            ("/queries/GetTenders", "–ó–∞–∫—É–ø–∫–∏", {"take": 5, "skip": 0}),
            ("/queries/GetOffers", "–û—Ñ–µ—Ä—Ç—ã", {"take": 5, "skip": 0}),
            ("/queries/GetCustomers", "–ó–∞–∫–∞–∑—á–∏–∫–∏", {"take": 5, "skip": 0}),
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            ("/queries/GetStatistics", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", {}),
            ("/queries/GetContractStats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤", {}),
            
            # –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
            ("/references/GetOkpdReference", "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –û–ö–ü–î2", {}),
            ("/references/GetRegionsReference", "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤", {}),
            ("/references/GetProductionDirectoryReference", "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤", {}),
            ("/references/GetProductionReference", "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø—Ä–æ–¥—É–∫—Ü–∏–∏", {}),
            
            # –í–Ω–µ—à–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã
            ("/queries/GetExternalSkus", "–í–Ω–µ—à–Ω–∏–µ –°–¢–ï", {"take": 5}),
            ("/queries/GetExternalSkuChangeRequests", "–ó–∞—è–≤–∫–∏ –Ω–∞ –°–¢–ï", {"take": 5}),
            
            # –ö–æ–º–∞–Ω–¥—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            ("/commands/SyncWithEis", "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –ï–ò–°", {}),
            ("/commands/ProcessIntegrationQueue", "–û—á–µ—Ä–µ–¥—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏", {}),
            ("/commands/AddExternalIntegrationQueue", "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å", {}),
            
            # –í–Ω–µ—à–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
            ("/externalCommands/ReceiveNotification", "–ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", {}),
            ("/externalCommands/CreateNeed", "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏", {}),
            
            # Token endpoints
            ("/Token/CheckToken", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞", {}),
            ("/Token/CreateToken", "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞", {}),
        ]
        
        available_endpoints = []
        
        for endpoint, description, params in endpoints_to_test:
            url = f"{self.base_url}{endpoint}"
            print(f"\nüîç –¢–µ—Å—Ç: {description}")
            print(f"   URL: {endpoint}")
            
            try:
                # –ü—Ä–æ–±—É–µ–º POST –∑–∞–ø—Ä–æ—Å
                response = self.session.post(url, json=params, timeout=10)
                print(f"   POST —Å—Ç–∞—Ç—É—Å: {response.status_code}")
                
                if response.status_code == 200:
                    data = response.json()
                    count = data.get('count', len(data.get('items', [])))
                    print(f"   ‚úÖ –î–û–°–¢–£–ü–ï–ù - –∑–∞–ø–∏—Å–µ–π: {count}")
                    available_endpoints.append((endpoint, description, count, 'POST'))
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
                    filename = f"available_{description.replace(' ', '_').lower()}.json"
                    with open(filename, 'w', encoding='utf-8') as f:
                        json.dump(data, f, ensure_ascii=False, indent=2)
                    print(f"   üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
                    
                elif response.status_code == 400:
                    print(f"   ‚ö†Ô∏è  –¢—Ä–µ–±—É—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
                    available_endpoints.append((endpoint, description, "needs_params", 'POST'))
                    
                elif response.status_code == 403:
                    print(f"   ‚ùå –î–û–°–¢–£–ü –ó–ê–ü–†–ï–©–ï–ù")
                    
                elif response.status_code == 404:
                    print(f"   ‚ùå ENDPOINT –ù–ï –ù–ê–ô–î–ï–ù")
                    
                elif response.status_code == 401:
                    print(f"   ‚ùå –ù–ï–ê–í–¢–û–†–ò–ó–û–í–ê–ù")
                    
                elif response.status_code == 405:
                    # –ü—Ä–æ–±—É–µ–º GET –µ—Å–ª–∏ POST –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
                    print(f"   ‚ö†Ô∏è  POST –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –ø—Ä–æ–±—É–µ–º GET...")
                    get_response = self.session.get(url, timeout=10)
                    print(f"   GET —Å—Ç–∞—Ç—É—Å: {get_response.status_code}")
                    
                    if get_response.status_code == 200:
                        data = get_response.json()
                        count = len(data) if isinstance(data, list) else len(data.get('items', []))
                        print(f"   ‚úÖ –î–û–°–¢–£–ü–ï–ù —á–µ—Ä–µ–∑ GET - –∑–∞–ø–∏—Å–µ–π: {count}")
                        available_endpoints.append((endpoint, description, count, 'GET'))
                    
            except requests.exceptions.Timeout:
                print(f"   ‚è∞ –¢–ê–ô–ú–ê–£–¢")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        return available_endpoints

    def get_detailed_data(self, available_endpoints):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö endpoints"""
        print("\n" + "=" * 60)
        print("–ü–û–õ–£–ß–ï–ù–ò–ï –î–ï–¢–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•")
        print("=" * 60)
        
        for endpoint, description, count, method in available_endpoints:
            if count == "needs_params":
                continue
                
            print(f"\nüì• –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: {description}")
            url = f"{self.base_url}{endpoint}"
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö
                if method == 'POST':
                    params = {"take": 50, "skip": 0, "withCount": True}
                    response = self.session.post(url, json=params, timeout=15)
                else:
                    response = self.session.get(url, timeout=15)
                
                if response.status_code == 200:
                    data = response.json()
                    
                    if isinstance(data, dict):
                        total_count = data.get('count', 0)
                        items = data.get('items', [])
                    else:
                        items = data
                        total_count = len(items)
                    
                    print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ: {len(items)} –∏–∑ {total_count} –∑–∞–ø–∏—Å–µ–π")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
                    if items:
                        self.save_to_csv(items, description)
                        
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
                    if items and isinstance(items[0], dict):
                        print(f"   üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {list(items[0].keys())[:5]}...")
                        
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

    def save_to_csv(self, data, description):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ CSV"""
        try:
            if data and isinstance(data[0], dict):
                df = pd.DataFrame(data)
                filename = f"{description.replace(' ', '_').lower()}_detailed.csv"
                df.to_csv(filename, index=False, encoding='utf-8-sig')
                print(f"   üíæ CSV —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                numeric_cols = df.select_dtypes(include=['number']).columns
                if len(numeric_cols) > 0:
                    print(f"   üìà –ß–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {list(numeric_cols)}")
                    
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è CSV: {e}")

    def test_specific_filters(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö endpoints"""
        print("\n" + "=" * 60)
        print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–ò–õ–¨–¢–†–û–í")
        print("=" * 60)
        
        filter_tests = [
            {
                "endpoint": "/queries/GetSkus",
                "description": "–¢–æ–≤–∞—Ä—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏",
                "filters": [
                    {"hasOffers": True},
                    {"offerType": "referencePrice"},
                    {"kpgzCode": {"values": ["01"]}}
                ]
            },
            {
                "endpoint": "/queries/GetContracts", 
                "description": "–ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏",
                "filters": [
                    {"status": "ACTIVE"},
                    {"conclusionDate": {"from": "2024-01-01", "to": "2024-12-31"}}
                ]
            }
        ]
        
        for test in filter_tests:
            url = f"{self.base_url}{test['endpoint']}"
            print(f"\nüîç –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤: {test['description']}")
            
            for filter_obj in test['filters']:
                params = {
                    "take": 10,
                    "skip": 0, 
                    "withCount": True,
                    "filter": filter_obj
                }
                
                try:
                    response = self.session.post(url, json=params, timeout=10)
                    print(f"   –§–∏–ª—å—Ç—Ä {filter_obj}: —Å—Ç–∞—Ç—É—Å {response.status_code}")
                    
                    if response.status_code == 200:
                        data = response.json()
                        count = data.get('count', 0)
                        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ: {count} –∑–∞–ø–∏—Å–µ–π")
                        
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    # –í–∞—à –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
    API_KEY = "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJwbDgxLVYyWUNyQ1V0bmVRTWxxRUNmSVluS1Z3VExnQVIwZXhiTkF1SF9nIn0.eyJleHAiOjIwNzUxMzc3NDcsImlhdCI6MTc1OTc3NzgxOCwiYXV0aF90aW1lIjoxNzU5Nzc3NzQ3LCJqdGkiOiJlZjYzNzcwYi03YjcyLTQ1M2UtYWFiMS0wZDYwMzY0YjBiNTQiLCJpc3MiOiJodHRwczovL3pha3Vwa2kubW9zLnJ1L2F1dGgvcmVhbG1zL1BwUmVhbG0iLCJhdWQiOiJJbnRlZ3JhdGlvbkFwcCIsInN1YiI6IjdlMjhiZTU5LWYyNjYtNGNkZi05OWJhLTMzYzJmYTFmZWY4ZSIsInR5cCI6IkJlYXJlciIsImF6cCI6IlBwQXBwIiwic2Vzc2lvbl9zdGF0ZSI6ImViMGNmYzIzLWJjYmQtNDg1NS05OWRlLTkyNmY1Y2VkNmEyZiIsInNjb3BlIjoiSW50ZWdyYXRpb25TY29wZSIsInNpZCI6ImViMGNmYzIzLWJjYmQtNDg1NS05OWRlLTkyNmY1Y2VkNmEyZiJ9.ZJT5EnlbNip9C3yp_nCOmUfXPETQACO3v-1_FUAFZSTrjlc6F8PBRPpRToerFT4EWD1yndB5mkeMQ4XeYSEhvJ4ysDO4UUWSNPtQKDgHuBR03NbGOROKomI1YQq4-hHS5r_-O5bAsHEqWuSQTpvTDGhnns51IsQwo9FI56y26DS73j4NXSWl5OF1riQ0djahXTsB-psWVzvIsJrhNuvNOuDHyDElpBOiMLas6tjMfCVmL9fxrS5h4I4gKPLHmFaamdcy8Nl054gi6q9jFAppyZSjxIJdu7f9QgZc2CjxYenp7eOqkQzL_ThAoMPfvwExvBgoGWHh3i6pPnubkVOwPw"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    if not check_token_details(API_KEY):
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º endpoints
    tester = MosZakupkiAPITester(API_KEY)
    available_endpoints = tester.test_comprehensive_endpoints()
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 60)
    print("–ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    if available_endpoints:
        print(f"‚úÖ –î–û–°–¢–£–ü–ù–´–• ENDPOINTS: {len(available_endpoints)}")
        for endpoint, description, count, method in available_endpoints:
            print(f"   üìç {description}: {endpoint} ({method}) - {count}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        tester.get_detailed_data(available_endpoints)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        tester.test_specific_filters()
        
    else:
        print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö endpoints")
        print("\n–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("1. IntegrationScope –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞")
        print("2. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ —Ç–æ–∫–µ–Ω —Å scope 'read' –∏–ª–∏ 'public'")
        print("3. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø–æ—Ä—Ç–∞–ª–∞")

if __name__ == "__main__":
    main()