# main.py - –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List, Dict
import asyncpg
import os
from datetime import datetime
import logging
from collections import defaultdict, Counter
import math
import re

# Logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

app = FastAPI(title="Smart Procurement Recommendations API")

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://127.0.0.1:3000", "https://faso312.ru"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Models
class RecommendationRequest(BaseModel):
    user_id: str
    limit: int = 15

class RecommendationResponse(BaseModel):
    user_id: str
    recommendations_count: int
    recommendations: List[Dict]
    engine: str
    generated_at: str

# Database Service
class DatabaseService:
    def __init__(self):
        self.pool = None
        
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL"""
        try:
            self.pool = await asyncpg.create_pool(
                user='store_app1',
                host='localhost',
                database='pc_db',
                password='1234',
                port=5432,
                min_size=3,
                max_size=10
            )
            logger.info("Connected to PostgreSQL database pc_db")
            
        except Exception as e:
            logger.error(f"Database connection failed: {e}")
            raise
    
    async def get_user_procurements(self, user_id: str) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            query = """
            SELECT 
                p.procurement_id,
                pi.product_id,
                pr.name as product_name,
                pr.category_id,
                c.name as category_name,
                pi.quantity,
                pi.unit_price,
                pr.average_price,
                p.procurement_date
            FROM procurements p
            JOIN procurement_items pi ON p.procurement_id = pi.procurement_id
            JOIN products pr ON pi.product_id = pr.product_id
            LEFT JOIN categories c ON pr.category_id = c.category_id
            WHERE p.user_id = $1
            ORDER BY p.procurement_date DESC
            LIMIT 1000
            """
            
            async with self.pool.acquire() as conn:
                rows = await conn.fetch(query, user_id)
            
            procurements = []
            for row in rows:
                procurements.append({
                    'procurement_id': row['procurement_id'],
                    'product_id': row['product_id'],
                    'product_name': row['product_name'],
                    'category_id': row['category_id'],
                    'category_name': row['category_name'] or '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
                    'quantity': row['quantity'] or 1,
                    'unit_price': float(row['unit_price']) if row['unit_price'] else 0,
                    'average_price': float(row['average_price']) if row['average_price'] else 0,
                })
            
            logger.info(f"Loaded {len(procurements)} procurement items for user {user_id}")
            return procurements
            
        except Exception as e:
            logger.error(f"Error getting user procurements: {e}")
            return []
    
    async def get_available_products(self, limit: int = 20000) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
        try:
            query = """
            SELECT 
                p.product_id,
                p.name,
                p.description,
                p.category_id,
                c.name as category_name,
                p.manufacturer,
                p.average_price,
                p.unit_of_measure,
                p.specifications,
                p.is_available,
                (SELECT COUNT(*) FROM procurement_items pi WHERE pi.product_id = p.product_id) as purchase_count
            FROM products p
            LEFT JOIN categories c ON p.category_id = c.category_id
            WHERE p.is_available = true 
            AND p.average_price > 0
            AND p.name IS NOT NULL
            AND LENGTH(TRIM(p.name)) > 5
            ORDER BY purchase_count DESC, p.average_price DESC
            LIMIT $1
            """
            
            async with self.pool.acquire() as conn:
                rows = await conn.fetch(query, limit)
            
            products = []
            seen_names = set()  # –î–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            
            for row in rows:
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                normalized_name = self._normalize_product_name(row['name'])
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                if normalized_name in seen_names:
                    continue
                seen_names.add(normalized_name)
                
                # –£–ª—É—á—à–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—é
                category_name = self._improve_category(row['category_name'], row['name'])
                
                products.append({
                    'product_id': row['product_id'],
                    'name': row['name'],
                    'normalized_name': normalized_name,
                    'description': row['description'],
                    'category_id': row['category_id'],
                    'category_name': category_name,
                    'manufacturer': row['manufacturer'],
                    'average_price': float(row['average_price']),
                    'unit_of_measure': row['unit_of_measure'],
                    'specifications': row['specifications'],
                    'is_available': row['is_available'],
                    'purchase_count': row['purchase_count'] or 0
                })
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            category_dist = Counter(p['category_name'] for p in products)
            logger.info(f"üì¶ Loaded {len(products)} unique available products")
            logger.info(f"üìä Category distribution: {dict(category_dist.most_common(8))}")
            
            return products
            
        except Exception as e:
            logger.error(f"Error getting available products: {e}")
            return []
    
    def _normalize_product_name(self, name: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
        if not name:
            return ""
        
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        normalized = name.lower().strip()
        
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        normalized = re.sub(r'\s+', ' ', normalized)
        
        # –£–¥–∞–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —É–ø–∞–∫–æ–≤–∫–∏ –≤ —Å–∫–æ–±–∫–∞—Ö (100 —à—Ç/—É–ø –∏ —Ç.–¥.)
        normalized = re.sub(r'\s*\(\s*\d+\s*—à—Ç/\s*—É–ø\s*\)', '', normalized)
        normalized = re.sub(r'\s*\d+\s*—à—Ç/\s*—É–ø\.?', '', normalized)
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        normalized = re.sub(r'\s*\(\s*[^)]*\d+\s*–º–º\s*[^)]*\)', '', normalized)
        
        return normalized.strip()
    
    def _improve_category(self, current_category: str, product_name: str) -> str:
        """–£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        if current_category and current_category != '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏':
            return current_category
        
        name_lower = product_name.lower()
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        category_keywords = {
            '–ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è': ['—Ä—É—á–∫–∞', '–∫–∞—Ä–∞–Ω–¥–∞—à', '–ª–∞—Å—Ç–∏–∫', '–ª–∏–Ω–µ–π–∫–∞', '–±–ª–æ–∫–Ω–æ—Ç', '—Ç–µ—Ç—Ä–∞–¥—å', '—Å–∫—Ä–µ–ø–∫–∞', '—Å—Ç–µ–ø–ª–µ—Ä', '–¥—ã—Ä–æ–∫–æ–ª'],
            '–ë—É–º–∞–∂–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è': ['–±—É–º–∞–≥–∞', '–ø–ª–µ–Ω–∫–∞', '–ª–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω', '–∫–∞—Ä—Ç—Ä–∏–¥–∂', '—Ç–æ–Ω–µ—Ä', '–±–ª–æ–∫ –¥–ª—è –∑–∞–ø–∏—Å–µ–π'],
            '–û—Ñ–∏—Å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞': ['–ø—Ä–∏–Ω—Ç–µ—Ä', '—Å–∫–∞–Ω–µ—Ä', '–∫—Å–µ—Ä–æ–∫—Å', '–º—Ñ—É', '–ª–∞–º–∏–Ω–∞—Ç–æ—Ä', '–±—Ä–æ—à—é—Ä–∞—Ç–æ—Ä'],
            '–†–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã': ['–∫–∞—Ä—Ç—Ä–∏–¥–∂', '—Ç–æ–Ω–µ—Ä', '–ø–ª–µ–Ω–∫–∞', '—á–µ—Ä–Ω–∏–ª–∞', '–±—É–º–∞–≥–∞'],
            '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞': ['usb', '–∫–∞–±–µ–ª—å', '—Ä–∞–∑–≤–µ—Ç–≤–∏—Ç–µ–ª—å', '—Ä–æ—É—Ç–µ—Ä', '–Ω–∞—É—à–Ω–∏–∫', '–∫–æ–ª–æ–Ω–∫–∞'],
            '–•–æ–∑—Ç–æ–≤–∞—Ä—ã': ['–º—ã–ª–æ', '—Ç—É–∞–ª–µ—Ç–Ω–∞—è', '–±—É–º–∞–≥–∞', '–º–æ—é—â–µ–µ', '—á–∏—Å—Ç—è—â', '–ø–µ—Ä—á–∞—Ç–∫'],
            '–ú–µ–±–µ–ª—å': ['—Å—Ç–æ–ª', '—Å—Ç—É–ª', '–∫—Ä–µ—Å–ª–æ', '—à–∫–∞—Ñ', '–ø–æ–ª–∫–∞', '—Å—Ç–µ–ª–ª–∞–∂']
        }
        
        for category, keywords in category_keywords.items():
            if any(keyword in name_lower for keyword in keywords):
                return category
        
        return '–û—Ñ–∏—Å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã'  # –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤–º–µ—Å—Ç–æ "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"

# Smart Recommendation Engine
class SmartRecommendationEngine:
    def __init__(self, db_service):
        self.db = db_service
        
    async def generate_recommendations(self, user_id: str, limit: int = 15) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        
        # 1. –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_procurements = await self.db.get_user_procurements(user_id)
        
        # 2. –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        available_products = await self.db.get_available_products(15000)
        
        # 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_profile = self._analyze_user_profile(user_procurements)
        
        # 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = []
        purchased_products = set(p['product_id'] for p in user_procurements)
        seen_recommendations = set()  # –î–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        
        for product in available_products:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –∫—É–ø–ª–µ–Ω–Ω—ã–µ
            if product['product_id'] in purchased_products:
                continue
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é
            if product['normalized_name'] in seen_recommendations:
                continue
            
            score_data = self._calculate_product_score(product, user_profile)
            
            if score_data['total_score'] > 0.25:  # –ü–æ–≤—ã—à–∞–µ–º –ø–æ—Ä–æ–≥ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
                recommendation = {
                    'product_id': product['product_id'],
                    'product_name': product['name'],
                    'product_category': product['category_name'],
                    'total_score': round(score_data['total_score'], 4),
                    'component_scores': score_data['components'],
                    'explanation': self._generate_smart_explanation(product, user_profile, score_data),
                    'price_range': {
                        'avg': product['average_price'],
                        'min': product['average_price'] * 0.8,
                        'max': product['average_price'] * 1.2,
                        'source': 'database_real'
                    },
                    'in_catalog': True,
                    'is_available': True,
                    'real_data': True,
                    'purchase_count': product['purchase_count']
                }
                
                recommendations.append(recommendation)
                seen_recommendations.add(product['normalized_name'])
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º
        recommendations.sort(key=lambda x: x['total_score'], reverse=True)
        final_recommendations = recommendations[:limit]
        
        if final_recommendations:
            scores = [r['total_score'] for r in final_recommendations]
            score_range = f"{max(scores):.3f}-{min(scores):.3f}"
            avg_score = sum(scores) / len(scores)
        else:
            score_range = "0-0"
            avg_score = 0
            
        logger.info(f"User {user_id}: {len(final_recommendations)} unique recommendations, scores: {score_range}, avg: {avg_score:.3f}")
        
        return final_recommendations
    
    def _analyze_user_profile(self, procurements: List[Dict]) -> Dict:
        """–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        profile = {
            'purchased_products': set(),
            'categories': Counter(),
            'price_points': [],
            'total_spent': 0,
            'total_items': 0,
            'preferred_price_range': None,
            'category_affinity': {},
            'purchase_patterns': {}
        }
        
        if not procurements:
            return profile
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—É–ø–æ–∫
        for proc in procurements:
            product_id = proc['product_id']
            category = proc['category_name']
            price = proc['unit_price'] or proc['average_price']
            quantity = proc['quantity']
            
            profile['purchased_products'].add(product_id)
            profile['categories'][category] += quantity
            profile['total_spent'] += price * quantity
            profile['total_items'] += quantity
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ü–µ–Ω–æ–≤—ã–µ —Ç–æ—á–∫–∏
            for _ in range(quantity):
                profile['price_points'].append(price)
        
        # –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
        if profile['price_points']:
            sorted_prices = sorted(profile['price_points'])
            n = len(sorted_prices)
            profile['preferred_price_range'] = {
                'min': sorted_prices[0],
                'max': sorted_prices[-1],
                'avg': sum(sorted_prices) / n,
                'median': sorted_prices[n // 2],
                'q1': sorted_prices[n // 4],
                'q3': sorted_prices[3 * n // 4]
            }
        
        # –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
        if profile['categories']:
            total_items = profile['total_items']
            for category, count in profile['categories'].items():
                profile['category_affinity'][category] = count / total_items
        
        logger.info(f"üë§ User profile: {profile['total_items']} items, {len(profile['categories'])} categories, "
                   f"avg price: {profile['preferred_price_range']['avg'] if profile['preferred_price_range'] else 0:.0f}‚ÇΩ")
        
        return profile
    
    def _calculate_product_score(self, product: Dict, user_profile: Dict) -> Dict:
        """–†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
        components = {}
        
        # 1. –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ (40%)
        cat_affinity = user_profile['category_affinity'].get(product['category_name'], 0)
        if cat_affinity > 0.1:  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–Ω–æ –ø–æ–∫—É–ø–∞–µ—Ç –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            components['category_match'] = min(cat_affinity * 3.0, 1.0) * 0.4
        elif cat_affinity > 0:   # –ï—Å—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å
            components['category_match'] = 0.3 * 0.4
        else:                    # –ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            components['category_match'] = 0.1 * 0.4
        
        # 2. –¶–µ–Ω–æ–≤–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (30%)
        price_stats = user_profile['preferred_price_range']
        if price_stats:
            product_price = product['average_price']
            avg_price = price_stats['avg']
            
            if avg_price > 0:
                # –ú—è–≥–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –∫–≤–∞—Ä—Ç–∏–ª–µ–π
                if price_stats['q1'] <= product_price <= price_stats['q3']:
                    components['price_fit'] = 0.9 * 0.3  # –í –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
                elif price_stats['min'] <= product_price <= price_stats['max']:
                    components['price_fit'] = 0.7 * 0.3  # –í –æ–±—â–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
                else:
                    # –í–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ - –ø–ª–∞–≤–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ
                    price_diff = min(abs(product_price - price_stats['min']), 
                                   abs(product_price - price_stats['max'])) / avg_price
                    components['price_fit'] = max(0.3 - price_diff, 0.1) * 0.3
            else:
                components['price_fit'] = 0.5 * 0.3
        else:
            components['price_fit'] = 0.3 * 0.3
        
        # 3. –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –∏ –∫–∞—á–µ—Å—Ç–≤–æ (30%)
        purchase_count = product.get('purchase_count', 0)
        
        # –õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å
        if purchase_count > 100:
            popularity = 0.9
        elif purchase_count > 10:
            popularity = 0.7
        elif purchase_count > 0:
            popularity = 0.4
        else:
            popularity = 0.1
        
        # –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
        data_quality = 0.0
        if len(product['name']) > 20:  # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            data_quality += 0.05
        if product['manufacturer']:
            data_quality += 0.03
        if product['description']:
            data_quality += 0.02
        
        components['popularity_quality'] = (popularity + data_quality) * 0.3
        
        # –û–±—â–∏–π score
        total_score = sum(components.values())
        
        return {
            'total_score': min(total_score, 1.0),
            'components': {k: round(v, 4) for k, v in components.items()}
        }
    
    def _generate_smart_explanation(self, product: Dict, user_profile: Dict, score_data: Dict) -> str:
        """–£–º–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        explanations = []
        components = score_data['components']
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
        cat_affinity = user_profile['category_affinity'].get(product['category_name'], 0)
        if cat_affinity > 0.2:
            explanations.append("—á–∞—Å—Ç–æ –ø–æ–∫—É–ø–∞–µ—Ç–µ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        elif cat_affinity > 0.05:
            explanations.append("–≤ —Å—Ñ–µ—Ä–µ –≤–∞—à–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤")
        
        # –¶–µ–Ω–æ–≤–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
        price_fit = components['price_fit'] / 0.3  # –î–µ–Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
        if price_fit > 0.8:
            explanations.append("–∏–¥–µ–∞–ª—å–Ω–æ –ø–æ —Ü–µ–Ω–µ")
        elif price_fit > 0.6:
            explanations.append("–æ—Ç–ª–∏—á–Ω–æ –≤–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ –±—é–¥–∂–µ—Ç")
        elif price_fit > 0.4:
            explanations.append("–¥–æ—Å—Ç—É–ø–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç")
        
        # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
        purchase_count = product.get('purchase_count', 0)
        if purchase_count > 100:
            explanations.append("—Ö–∏—Ç –ø—Ä–æ–¥–∞–∂")
        elif purchase_count > 50:
            explanations.append("–ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Ç–æ–≤–∞—Ä")
        elif purchase_count > 10:
            explanations.append("–≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã–π –≤—ã–±–æ—Ä")
        
        if explanations:
            return "üí° " + ", ".join(explanations)
        else:
            return "üåü –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞"

# Global services
db_service = DatabaseService()
recommendation_engine = SmartRecommendationEngine(db_service)

# Startup
@app.on_event("startup")
async def startup_event():
    await db_service.connect()
    logger.info("‚úÖ Smart recommendation engine initialized")

# API Endpoints
@app.get("/")
async def root():
    return {
        "message": "Smart Procurement Recommendations API", 
        "status": "running", 
        "version": "4.0-smart"
    }

@app.get("/health")
async def health_check():
    try:
        async with db_service.pool.acquire() as conn:
            stats = await conn.fetchrow("""
                SELECT 
                    COUNT(*) as total_products,
                    COUNT(CASE WHEN is_available = true AND average_price > 0 THEN 1 END) as available_products
                FROM products
            """)
            
        return {
            "status": "healthy",
            "database": "connected", 
            "total_products": stats['total_products'],
            "available_products": stats['available_products'],
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        return {"status": "unhealthy", "error": str(e)}

@app.post("/api/recommendations", response_model=RecommendationResponse)
async def get_recommendations(request: RecommendationRequest):
    try:
        logger.info(f"Getting SMART recommendations for user: {request.user_id}")
        
        recommendations = await recommendation_engine.generate_recommendations(
            user_id=request.user_id,
            limit=request.limit
        )
        
        return RecommendationResponse(
            user_id=request.user_id,
            recommendations_count=len(recommendations),
            recommendations=recommendations,
            engine="smart_v4",
            generated_at=datetime.now().isoformat()
        )
        
    except Exception as e:
        logger.error(f"Recommendations error: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
@app.get("/api/ml/health")
async def ml_health():
    return await health_check()

@app.post("/api/ml/recommendations")
async def ml_recommendations(request: RecommendationRequest):
    return await get_recommendations(request)

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="127.0.0.1", port=8000, log_level="info")