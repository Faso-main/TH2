/* eslint-disable no-undef */
/* eslint-disable no-unused-vars */
import { useState, useEffect } from 'react';
import './App.css';
import './Body.css';
import './Header.css';
import Modal from './modal/Modal';
import LoginForm from './modal/LoginForm';
import RegisterForm from './modal/RegisterForm';
import UserProfile from './modal/UserProfile';
import CreateProcurement from './modal/CreateProcurement';
import { authAPI, productsAPI, procurementsAPI } from './services/api';
import { generateProductImage, getCategoryColor } from './utils/productImages';

function App() {
  const [savedProcurementFormData, setSavedProcurementFormData] = useState(null);
  const [activeModal, setActiveModal] = useState(null);
  const [authMode, setAuthMode] = useState('login');
  const [currentUser, setCurrentUser] = useState(null);
  const [products, setProducts] = useState([]);
  const [procurements, setProcurements] = useState([]);
  const [loading, setLoading] = useState(true);
  const [authLoading, setAuthLoading] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [searchResults, setSearchResults] = useState({ products: [], procurements: [] });
  const [isSearching, setIsSearching] = useState(false);
  const [selectedProducts, setSelectedProducts] = useState([]);
  const [procurementCreationStep, setProcurementCreationStep] = useState(1);
  const [activeSection, setActiveSection] = useState('products');
  const [highlightAddToProcurement, setHighlightAddToProcurement] = useState(false);
  const [savedProcurementData, setSavedProcurementData] = useState(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  useEffect(() => {
    const user = authAPI.getCurrentUser();
    if (user && authAPI.isAuthenticated()) {
      setCurrentUser(user);
    }
    loadInitialData();
  }, []);

  const loadInitialData = async () => {
    try {
      setLoading(true);
      
      const testProducts = [
        {
          id: 'prod-1',
          name: '–°–º–∞—Ä—Ç—Ñ–æ–Ω Apple iPhone 15 Pro',
          category_name: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
          price_per_item: 89999,
          amount: 10,
          company: 'Apple'
        },
        {
          id: 'prod-2',
          name: '–ù–æ—É—Ç–±—É–∫ Dell XPS 13',
          category_name: '–ö–æ–º–ø—å—é—Ç–µ—Ä—ã',
          price_per_item: 129999,
          amount: 5,
          company: 'Dell'
        }
      ];

      const testProcurements = [
        {
          id: 'PROC-12345',
          title: '–û–∫–∞–∑–∞–Ω–∏–µ —É—Å–ª—É–≥ –ø–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ —É—Å–ª–æ–≤–∏–π —Ç—Ä—É–¥–∞',
          status: 'active',
          current_price: 92500,
          description: '–ó–∞–∫—É–ø–∫–∞ —É—Å–ª—É–≥ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–µ —É—Å–ª–æ–≤–∏–π —Ç—Ä—É–¥–∞ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è',
          customer_name: '¬´–®–∫–æ–ª–∞ ‚Ññ 1811 ¬´–í–æ—Å—Ç–æ—á–Ω–æ–µ –ò–∑–º–∞–π–ª–æ–≤–æ¬ª',
          customer_inn: '7719894832',
          procurement_date: '2024-01-15T00:00:00Z',
          participants_count: 7,
          products: []
        }
      ];

      try {
        const [productsResponse, procurementsResponse] = await Promise.all([
          productsAPI.getProducts({ limit: 20 }),
          procurementsAPI.getProcurements({ limit: 10 })
        ]);
        
        setProducts(productsResponse.products || testProducts);
        setProcurements(procurementsResponse.procurements || testProcurements);
      } catch (apiError) {
        console.warn('API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
        setProducts(testProducts);
        setProcurements(testProcurements);
      }

    } catch (error) {
      console.error('Error loading data:', error);
    } finally {
      setLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–∞–ª—å–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏
  const openModal = (modalName) => {
    setActiveModal(modalName);
  };

  const closeModal = () => {
    setActiveModal(null);
    setAuthMode('login');
  };

  const switchAuthMode = (mode) => {
    setAuthMode(mode);
  };

  // –§—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const handleLoginSuccess = (user) => {
    setCurrentUser(user);
    closeModal();
    setTimeout(() => {
      alert(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.name}!`);
    }, 100);
  };

  const handleRegisterSuccess = (user) => {
    setCurrentUser(user);
    closeModal();
    setTimeout(() => {
      alert(`–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.name}!`);
    }, 100);
  };

  const handleLogout = async () => {
    try {
      setAuthLoading(true);
      await authAPI.logout();
      setCurrentUser(null);
      clearSelectedProducts();
      alert('–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
    } catch (error) {
      console.error('Logout error:', error);
      setCurrentUser(null);
      clearSelectedProducts();
    } finally {
      setAuthLoading(false);
    }
  };

  const handleUserProfileClick = () => {
    if (currentUser) {
      openModal('profile');
    } else {
      openModal('auth');
    }
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏
  const handleAddToProcurement = (product) => {
    if (!currentUser) {
      openModal('auth');
      return;
    }

    setSelectedProducts(prev => {
      const existingProduct = prev.find(p => p.id === product.id);
      if (existingProduct) {
        return prev.map(p => 
          p.id === product.id 
            ? { ...p, quantity: (p.quantity || 1) + 1 }
            : p
        );
      }
      return [...prev, { ...product, quantity: 1 }];
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
    showNotification(`–¢–æ–≤–∞—Ä "${product.name}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–∫—É–ø–∫—É`, 'success');
  };

  const handleRemoveFromProcurement = (productId) => {
    setSelectedProducts(prev => prev.filter(p => p.id !== productId));
  };

  const handleUpdateQuantity = (productId, quantity) => {
    if (quantity < 1) {
      handleRemoveFromProcurement(productId);
      return;
    }
    
    setSelectedProducts(prev => 
      prev.map(p => p.id === productId ? { ...p, quantity } : p)
    );
  };

  const clearSelectedProducts = () => {
    setSelectedProducts([]);
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫—É–ø–∫–∞–º–∏
  const handleCreateProcurement = async (procurementData) => {
    try {
      console.log('Creating procurement:', procurementData);
      
      const procurementWithProducts = {
        ...procurementData,
        products: selectedProducts.map(product => ({
          product_id: product.id,
          required_quantity: product.quantity,
          max_price: product.price_per_item
        }))
      };

      const response = await procurementsAPI.create(procurementWithProducts);
      
      setProcurements(prev => [response.procurement, ...prev]);
      clearSelectedProducts();
      setHighlightAddToProcurement(false);
      setSavedProcurementData(null);
      
      closeModal();
      
      showNotification('–ó–∞–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!', 'success');
      
      return response;
      
    } catch (error) {
      console.error('Create procurement error:', error);
      throw new Error(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫—É–ø–∫–∏');
    }
  };

  const handleParticipate = async (procurementId, proposedPrice) => {
    if (!currentUser) {
      openModal('auth');
      return;
    }

    try {
      await procurementsAPI.participate(procurementId, {
        proposed_price: proposedPrice,
        proposal_text: `–ì–æ—Ç–æ–≤ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ —Ü–µ–Ω–µ ${proposedPrice} ‚ÇΩ`
      });
      showNotification('–ó–∞—è–≤–∫–∞ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!', 'success');
      const response = await procurementsAPI.getProcurements();
      setProcurements(response.procurements);
    } catch (error) {
      showNotification(`–û—à–∏–±–∫–∞: ${error.message}`, 'error');
    }
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Å–æ–∑–¥–∞–Ω–∏–µ–º –∑–∞–∫—É–ø–∫–∏ –∏ –≤—ã–±–æ—Ä–æ–º —Ç–æ–≤–∞—Ä–æ–≤
  const handleAddProducts = () => {
    setSavedProcurementData({
      hasUnsavedData: true,
      timestamp: new Date().toISOString()
    });

    setActiveModal(null);
    setHighlightAddToProcurement(true);
    setActiveSection('products');
    
    showNotification('üéØ –í—ã–±–∏—Ä–∞–π—Ç–µ —Ç–æ–≤–∞—Ä—ã –∫–Ω–æ–ø–∫–æ–π "–í –∑–∞–∫—É–ø–∫—É". –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∑–∞–∫—É–ø–∫–∏, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.', 'info');
  };

  const handleReturnToProcurement = () => {
    setHighlightAddToProcurement(false);
    setProcurementCreationStep(2);
    setActiveModal('create-procurement');
    
    showNotification(`üìã –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏. –í—ã–±—Ä–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${selectedProducts.length}`, 'info');
  };

const handleOpenCreateProcurement = () => {
  setProcurementCreationStep(1);
  // –ù–µ –æ—á–∏—â–∞–µ–º savedProcurementData, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
  openModal('create-procurement');
};

const handleCloseCreateProcurement = () => {
  // –ü—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª–∫–∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º, —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
  if (savedProcurementFormData && savedProcurementFormData.hasUnsavedData) {
    const shouldSave = window.confirm('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–∑–∂–µ?');
    if (!shouldSave) {
      setSavedProcurementFormData(null);
    }
  } else {
    setSavedProcurementFormData(null);
  }
  setProcurementCreationStep(1);
  closeModal();
};

const handleSaveProcurementFormData = (formData) => {
  setSavedProcurementFormData({
    hasUnsavedData: true,
    formData: formData,
    timestamp: new Date().toISOString()
  });
};

// –î–æ–±–∞–≤—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:
const handleClearSavedProcurementData = () => {
  setSavedProcurementFormData(null);
};

  // –§—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞
  const handleSearch = async (query) => {
    if (!query.trim()) {
      setSearchResults({ products: [], procurements: [] });
      return;
    }

    setIsSearching(true);
    
    try {
      const searchLower = query.toLowerCase().trim();
      
      const foundProducts = products.filter(product => 
        product.name.toLowerCase().includes(searchLower) ||
        product.category_name?.toLowerCase().includes(searchLower) ||
        product.company?.toLowerCase().includes(searchLower) ||
        product.description?.toLowerCase().includes(searchLower)
      );

      const foundProcurements = procurements.filter(procurement =>
        procurement.title.toLowerCase().includes(searchLower) ||
        procurement.description?.toLowerCase().includes(searchLower) ||
        procurement.customer_name?.toLowerCase().includes(searchLower) ||
        procurement.session_number?.toLowerCase().includes(searchLower)
      );

      setSearchResults({
        products: foundProducts,
        procurements: foundProcurements
      });
      
    } catch (error) {
      console.error('Search error:', error);
      setSearchResults({ products: [], procurements: [] });
    } finally {
      setIsSearching(false);
    }
  };

  const handleSearchChange = (query) => {
    setSearchQuery(query);
    handleSearch(query);
  };

  const clearSearch = () => {
    setSearchQuery('');
    setSearchResults({ products: [], procurements: [] });
  };

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  const showNotification = (message, type = 'info') => {
    // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    console.log(`[${type.toUpperCase()}] ${message}`);
  };

  const getDisplayProducts = () => {
    return searchQuery ? searchResults.products : products;
  };

  const getDisplayProcurements = () => {
    return searchQuery ? searchResults.procurements : procurements;
  };

  return (
    <div className="app">
      <Header 
        currentUser={currentUser}
        onLogout={handleLogout}
        onUserProfileClick={handleUserProfileClick}
        onCreateProcurement={handleOpenCreateProcurement}
        authLoading={authLoading}
        searchQuery={searchQuery}
        onSearchChange={handleSearchChange}
        onClearSearch={clearSearch}
        isSearching={isSearching}
        selectedProductsCount={selectedProducts.length}
      />
      
      <Main 
        products={getDisplayProducts()}
        procurements={getDisplayProcurements()}
        loading={loading}
        currentUser={currentUser}
        onParticipate={handleParticipate}
        onOpenAuth={() => openModal('auth')}
        searchQuery={searchQuery}
        isSearching={isSearching}
        onAddToProcurement={handleAddToProcurement}
        selectedProducts={selectedProducts}
        highlightAddToProcurement={highlightAddToProcurement}
        onReturnToProcurement={handleReturnToProcurement}
        savedProcurementData={savedProcurementData}
        savedProcurementFormData={savedProcurementFormData}
        activeSection={activeSection}
        setActiveSection={setActiveSection}
        // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ –ø—Ä–æ–ø—Å—ã:
        setProcurementCreationStep={setProcurementCreationStep}
        setActiveModal={setActiveModal}
      />
      
      <Footer />

      {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ */}
      <Modal
        isOpen={activeModal === 'auth'}
        onClose={closeModal}
        title={authMode === 'login' ? '–í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç' : '–°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞'}
        size="small"
      >
        {authMode === 'login' ? (
          <LoginForm 
            onClose={closeModal}
            onSwitchToRegister={() => switchAuthMode('register')}
            onLoginSuccess={handleLoginSuccess}
          />
        ) : (
          <RegisterForm 
            onClose={closeModal}
            onSwitchToLogin={() => switchAuthMode('login')}
            onRegisterSuccess={handleRegisterSuccess}
          />
        )}
      </Modal>

      <Modal
        isOpen={activeModal === 'create-procurement'}
        onClose={handleCloseCreateProcurement}
        title={procurementCreationStep === 1 ? "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏" : "–í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤"}
        size="large"
      >
        <CreateProcurement 
          onClose={handleCloseCreateProcurement}
          onCreate={handleCreateProcurement}
          selectedProducts={selectedProducts}
          onUpdateQuantity={handleUpdateQuantity}
          onRemoveProduct={handleRemoveFromProcurement}
          onAddProducts={handleAddProducts}
          currentUser={currentUser}
          step={procurementCreationStep}
          onStepChange={setProcurementCreationStep}
          initialFormData={savedProcurementFormData?.formData}
          onFormDataChange={handleSaveProcurementFormData}
          onClearSavedForm={handleClearSavedProcurementData}
        />
      </Modal>

      <Modal
        isOpen={activeModal === 'profile'}
        onClose={closeModal}
        title="–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"
        size="large"
      >
        <UserProfile 
          user={currentUser} 
          onClose={closeModal}
        />
      </Modal>
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç Header
function Header({ 
  currentUser, 
  onLogout, 
  onUserProfileClick, 
  onCreateProcurement, 
  authLoading,
  searchQuery,
  onSearchChange,
  onClearSearch,
  isSearching,
  selectedProductsCount
}) {
  const handleSearchSubmit = (e) => {
    e.preventDefault();
  };

  const handleInputChange = (e) => {
    onSearchChange(e.target.value);
  };

  const handleClearClick = () => {
    onClearSearch();
  };

  return (
    <header className="header">
      <div className="header-container">
        <div className="logo">
          <h1>SpeedOfLight</h1>
        </div>
        
        <div className="header-search">
          <form className={`search-bar ${isSearching ? 'searching' : ''}`} onSubmit={handleSearchSubmit}>
            <input 
              type="text" 
              placeholder="–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∑–∞–∫—É–ø–æ–∫..." 
              className="search-input"
              value={searchQuery}
              onChange={handleInputChange}
              onKeyPress={(e) => {
                if (e.key === 'Enter') {
                  handleSearchSubmit(e);
                }
              }}
            />
            
            {searchQuery && (
              <button 
                type="button"
                className="clear-search-btn"
                onClick={handleClearClick}
                title="–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫"
              >
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                  <line x1="18" y1="6" x2="6" y2="18"></line>
                  <line x1="6" y1="6" x2="18" y2="18"></line>
                </svg>
              </button>
            )}
            
            <button type="submit" className="search-btn" disabled={isSearching}>
              {isSearching ? (
                <div className="loading-spinner-small"></div>
              ) : (
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                  <circle cx="11" cy="11" r="8"></circle>
                  <path d="m21 21-4.3-4.3"></path>
                </svg>
              )}
            </button>
          </form>
        </div>

        <div className="header-actions">
          {currentUser && (
            <button 
              className={`user-icon-btn create-procurement-btn ${selectedProductsCount > 0 ? 'has-products' : ''}`}
              onClick={onCreateProcurement}
              title="–°–æ–∑–¥–∞—Ç—å –∑–∞–∫—É–ø–∫—É"
            >
              <svg 
                width="35"
                height="35" 
                viewBox="0 0 24 24" 
                fill="none" 
                stroke="currentColor" 
                strokeWidth="2"
                strokeLinecap="round" 
                strokeLinejoin="round"
              >
                <line x1="12" y1="5" x2="12" y2="19"></line>
                <line x1="5" y1="12" x2="19" y2="12"></line>
              </svg>
              {selectedProductsCount > 0 && (
                <span className="selected-products-badge">{selectedProductsCount}</span>
              )}
            </button>
          )}

          <button 
            className={`user-icon-btn ${currentUser ? 'user-authenticated' : ''}`} 
            onClick={onUserProfileClick} 
            title={currentUser ? '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç' : '–í–æ–π—Ç–∏'}
            disabled={authLoading}
          >
            <svg 
              width="35"
              height="35" 
              viewBox="0 0 24 24" 
              fill="none" 
              stroke="currentColor" 
              strokeWidth="2" 
              strokeLinecap="round" 
              strokeLinejoin="round"
            >
              <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
              <circle cx="12" cy="7" r="4"></circle>
            </svg>
          </button>

          {currentUser && (
            <button 
              className="user-icon-btn logout-btn" 
              onClick={onLogout} 
              title="–í—ã–π—Ç–∏"
              disabled={authLoading}
            >
              {authLoading ? (
                <div className="loading-spinner-small"></div>
              ) : (
                <svg 
                  width="35"
                  height="35" 
                  viewBox="0 0 24 24" 
                  fill="none" 
                  stroke="currentColor" 
                  strokeWidth="2"
                >
                  <path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"></path>
                  <polyline points="16 17 21 12 16 7"></polyline>
                  <line x1="21" y1="12" x2="9" y2="12"></line>
                </svg>
              )}
            </button>
          )}
        </div>
      </div>
    </header>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç Main
function Main({ 
  products, 
  procurements, 
  loading, 
  currentUser, 
  onParticipate, 
  onOpenAuth,
  searchQuery,
  isSearching,
  onAddToProcurement,
  selectedProducts,
  highlightAddToProcurement,
  onReturnToProcurement,
  savedProcurementData,
  activeSection,
  setActiveSection,
  savedProcurementFormData,
  // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ –ø—Ä–æ–ø—Å—ã:
  setProcurementCreationStep,
  setActiveModal
}) {
  const [filteredProducts, setFilteredProducts] = useState(products);
  const [filteredProcurements, setFilteredProcurements] = useState(procurements);

  useEffect(() => {
    setFilteredProducts(products);
  }, [products]);

  useEffect(() => {
    setFilteredProcurements(procurements);
  }, [procurements]);

  const getDisplayProducts = () => {
    return searchQuery ? filteredProducts.filter(product => 
      product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      product.category_name?.toLowerCase().includes(searchQuery.toLowerCase()) ||
      product.company?.toLowerCase().includes(searchQuery.toLowerCase()) ||
      product.description?.toLowerCase().includes(searchQuery.toLowerCase())
    ) : filteredProducts;
  };

  const getDisplayProcurements = () => {
    return searchQuery ? filteredProcurements.filter(procurement =>
      procurement.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
      procurement.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||
      procurement.customer_name?.toLowerCase().includes(searchQuery.toLowerCase()) ||
      procurement.session_number?.toLowerCase().includes(searchQuery.toLowerCase())
    ) : filteredProcurements;
  };

  if (loading) {
    return (
      <main className="main">
        <div className="products-container">
          <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
        </div>
      </main>
    );
  }

  const displayProducts = getDisplayProducts();
  const displayProcurements = getDisplayProcurements();

  return (
    <main className="main">
<div className="products-container">
  {/* –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –±–∞–Ω–Ω–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∑–∞–∫—É–ø–∫–∏ */}
  {savedProcurementFormData && (
    <div className="saved-data-banner">
      <div className="banner-content">
        <div className="banner-info">
          <div>
            <div className="banner-subtitle">
              {selectedProducts.length > 0 
                ? `–í—ã–±—Ä–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${selectedProducts.length}` 
                : '–ì–æ—Ç–æ–≤–æ –∫ –≤—ã–±–æ—Ä—É —Ç–æ–≤–∞—Ä–æ–≤'
              }
              {savedProcurementFormData.formData?.customer_name && 
                ` ‚Ä¢ ${savedProcurementFormData.formData.customer_name}`
              }
            </div>
          </div>
        </div>
        <button 
          className="btn-primary"
          onClick={() => {
            // –í—Å–µ–≥–¥–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —à–∞–≥ 2 (–≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤)
            setProcurementCreationStep(2);
            setActiveModal('create-procurement');
          }}
        >
          –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ
        </button>
      </div>
    </div>
  )}

        <div className="products-layout">
          <section className="products-main">
            <div className="products-header">
              <div className="section-buttons">
                <button 
                  className={`section-btn ${activeSection === 'products' ? 'active' : ''}`}
                  onClick={() => setActiveSection('products')}
                >
                  –¢–æ–≤–∞—Ä—ã
                </button>
                <button 
                  className={`section-btn ${activeSection === 'procurements' ? 'active' : ''}`}
                  onClick={() => setActiveSection('procurements')}
                >
                  –ó–∞–∫—É–ø–∫–∏
                </button>
              </div>
              <div className="search-info">
                {searchQuery && (
                  <span className="search-results-count">
                    {activeSection === 'products' 
                      ? `–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${displayProducts.length}` 
                      : `–ù–∞–π–¥–µ–Ω–æ –∑–∞–∫—É–ø–æ–∫: ${displayProcurements.length}`
                    }
                    {isSearching && ' (–ø–æ–∏—Å–∫...)'}
                  </span>
                )}
                {!searchQuery && (
                  <span className="products-count">
                    {activeSection === 'products' 
                      ? `–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${displayProducts.length}` 
                      : `–í—Å–µ–≥–æ –∑–∞–∫—É–ø–æ–∫: ${displayProcurements.length}`
                    }
                  </span>
                )}
              </div>
            </div>
            
            {activeSection === 'products' ? (
              <ProductsGrid 
                products={displayProducts} 
                searchQuery={searchQuery}
                isSearching={isSearching}
                onAddToProcurement={onAddToProcurement}
                highlightAddToProcurement={highlightAddToProcurement}
              />
            ) : (
              <ProcurementsGrid 
                procurements={displayProcurements}
                currentUser={currentUser}
                onParticipate={onParticipate}
                onOpenAuth={onOpenAuth}
                searchQuery={searchQuery}
                isSearching={isSearching}
              />
            )}
          </section>

          <FiltersSidebar 
            activeSection={activeSection}
            products={products}
            procurements={procurements}
            onFiltersChange={() => {}}
          />
        </div>
      </div>
    </main>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç ProductsGrid
function ProductsGrid({ products, searchQuery, isSearching, onAddToProcurement, highlightAddToProcurement }) {
  const formatPrice = (price) => {
    return new Intl.NumberFormat('ru-RU').format(price);
  };

  if (isSearching) {
    return (
      <div className="products-grid">
        <div className="loading">–ü–æ–∏—Å–∫...</div>
      </div>
    );
  }

  if (searchQuery && products.length === 0) {
    return (
      <div className="no-results">
        <div className="no-results-icon">üîç</div>
        <h3>–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
        <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å</p>
      </div>
    );
  }

  return (
    <div className="products-grid">
      {products.map(product => {
        const categoryColor = getCategoryColor(product.category_name);
        const imageUrl = generateProductImage(product.name, categoryColor);
        
        return (
          <div key={product.id} className={`product-card ${highlightAddToProcurement ? 'highlight-add' : ''}`}>
            <div className="product-image">
              <img 
                src={imageUrl}
                alt={product.name}
                onError={(e) => {
                  e.target.style.display = 'none';
                  e.target.nextElementSibling.style.display = 'flex';
                }}
              />
              <div className="product-image-fallback" style={{display: 'none'}}>
                {product.name}
              </div>
              <button className="wishlist-btn">üíô</button>
            </div>
            <div className="product-info">
              <h3 className="product-title">{product.name}</h3>
              <p className="product-category">{product.category_name}</p>
              <p className="product-company">{product.company}</p>
              <div className="product-price">
                <span className="current-price">{formatPrice(product.price_per_item)} ‚ÇΩ</span>
              </div>
              <p className="product-stock">–í –Ω–∞–ª–∏—á–∏–∏: {product.amount || 10} —à—Ç.</p>
              <button 
                className="add-to-cart-btn"
                onClick={() => onAddToProcurement(product)}
              >
                {highlightAddToProcurement ? '‚ûï –í –∑–∞–∫—É–ø–∫—É' : '–í –∑–∞–∫—É–ø–∫—É'}
              </button>
            </div>
          </div>
        );
      })}
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç ProcurementsGrid
function ProcurementsGrid({ procurements, onParticipate, searchQuery, isSearching }) {
  const formatPrice = (price) => {
    return new Intl.NumberFormat('ru-RU').format(price);
  };

  const formatDate = (dateString) => {
    if (!dateString) return '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
    
    try {
      const date = new Date(dateString);
      if (isNaN(date.getTime())) {
        return '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
      }
      return date.toLocaleDateString('ru-RU');
    } catch (error) {
      console.error('Date formatting error:', error);
      return '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
    }
  };

  const getStatusInfo = (status) => {
    switch (status) {
      case 'active': return { class: 'active', text: '–ê–∫—Ç–∏–≤–Ω–∞' };
      case 'soon': return { class: 'soon', text: '–°–∫–æ—Ä–æ' };
      case 'completed': return { class: 'completed', text: '–ó–∞–≤–µ—Ä—à–µ–Ω–∞' };
      default: return { class: 'active', text: status };
    }
  };

  if (isSearching) {
    return (
      <div className="procurements-grid">
        <div className="loading">–ü–æ–∏—Å–∫...</div>
      </div>
    );
  }

  if (searchQuery && procurements.length === 0) {
    return (
      <div className="no-results">
        <div className="no-results-icon">üîç</div>
        <h3>–ó–∞–∫—É–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
        <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å</p>
      </div>
    );
  }

  return (
    <div className="procurements-grid">
      {procurements.map(procurement => {
        const statusInfo = getStatusInfo(procurement.status);
        
        return (
          <div key={procurement.id} className="procurement-card">
            <div className="procurement-header">
              <h3 className="procurement-title">{procurement.title}</h3>
              <span className={`procurement-status ${statusInfo.class}`}>
                {statusInfo.text}
              </span>
            </div>
            
            <div className="procurement-info">
              {procurement.description && (
                <p className="procurement-description">
                  {procurement.description}
                </p>
              )}
              
              <div className="procurement-details">
                <div className="detail-item">
                  <span className="detail-label">–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</span>
                  <span className="detail-value">{formatPrice(procurement.current_price)} ‚ÇΩ</span>
                </div>
                <div className="detail-item">
                  <span className="detail-label">–ó–∞–∫–∞–∑—á–∏–∫:</span>
                  <span className="detail-value">{procurement.customer_name}</span>
                </div>
                <div className="detail-item">
                  <span className="detail-label">–î–∞—Ç–∞ –∑–∞–∫—É–ø–∫–∏:</span>
                  <span className="detail-value">
                    {formatDate(procurement.procurement_date)}
                  </span>
                </div>
                <div className="detail-item">
                  <span className="detail-label">–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</span>
                  <span className="detail-value">{procurement.participants_count}</span>
                </div>
                <div className="detail-item">
                  <span className="detail-label">–¢–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫—É–ø–∫–µ:</span>
                  <span className="detail-value">{procurement.products?.length || 0}</span>
                </div>
              </div>

              {procurement.products && procurement.products.length > 0 && (
                <div className="procurement-products">
                  <h4>–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫—É–ø–∫–µ:</h4>
                  {procurement.products.map((product, index) => (
                    <div key={product.product_id || index} className="procurement-product-item">
                      <span>{product.product_name}</span>
                      <span>{product.required_quantity} —à—Ç.</span>
                      <span>{formatPrice(product.unit_price)} ‚ÇΩ/—à—Ç</span>
                    </div>
                  ))}
                </div>
              )}

              {procurement.status === 'active' && (
                <button 
                  className="participate-btn"
                  onClick={() => onParticipate(procurement.id, procurement.current_price * 0.95)}
                >
                  –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å
                </button>
              )}
              
              {procurement.status === 'soon' && (
                <button className="notify-btn">
                  –£–≤–µ–¥–æ–º–∏—Ç—å –æ —Å—Ç–∞—Ä—Ç–µ
                </button>
              )}
              
              {procurement.status === 'completed' && (
                <button className="view-results-btn">
                  –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                </button>
              )}
            </div>
          </div>
        );
      })}
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç FiltersSidebar
function FiltersSidebar({ activeSection, onFiltersChange }) {
  const [filters, setFilters] = useState({
    categories: [],
    priceRange: { min: '', max: '' },
    procurementStatus: ['active']
  });

  const topLevelCategories = [
    { id: 1, name: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞' },
    { id: 2, name: '–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞' },
    { id: 3, name: '–û–¥–µ–∂–¥–∞' },
    { id: 4, name: '–ú–µ–±–µ–ª—å' }
  ];

  const handleCategoryChange = (categoryId) => {
    const newCategories = filters.categories.includes(categoryId)
      ? filters.categories.filter(id => id !== categoryId)
      : [...filters.categories, categoryId];
    
    const newFilters = { ...filters, categories: newCategories };
    setFilters(newFilters);
    onFiltersChange(newFilters);
  };

  const handlePriceChange = (field, value) => {
    const newPriceRange = { ...filters.priceRange, [field]: value };
    const newFilters = { ...filters, priceRange: newPriceRange };
    setFilters(newFilters);
    onFiltersChange(newFilters);
  };

  const handleStatusChange = (status) => {
    const newStatus = filters.procurementStatus.includes(status)
      ? filters.procurementStatus.filter(s => s !== status)
      : [...filters.procurementStatus, status];
    
    const newFilters = { ...filters, procurementStatus: newStatus };
    setFilters(newFilters);
    onFiltersChange(newFilters);
  };

  const clearFilters = () => {
    const clearedFilters = {
      categories: [],
      priceRange: { min: '', max: '' },
      procurementStatus: ['active']
    };
    setFilters(clearedFilters);
    onFiltersChange(clearedFilters);
  };

  return (
    <aside className="filters-sidebar">
      <div className="filters-header">
        <h3>–§–∏–ª—å—Ç—Ä—ã</h3>
        <button className="clear-filters-btn" onClick={clearFilters}>
          –û—á–∏—Å—Ç–∏—Ç—å
        </button>
      </div>
      
      {activeSection === 'products' ? (
        <>
          <div className="filters-section">
            <h4>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</h4>
            <div className="filter-options">
              {topLevelCategories.map(category => (
                <label key={category.id} className="filter-option">
                  <input 
                    type="checkbox" 
                    checked={filters.categories.includes(category.id)}
                    onChange={() => handleCategoryChange(category.id)}
                  />
                  <span>{category.name}</span>
                </label>
              ))}
            </div>
          </div>

          <div className="filters-section">
            <h4>–¶–µ–Ω–∞, ‚ÇΩ</h4>
            <div className="price-range">
              <div className="price-inputs">
                <input 
                  type="number" 
                  placeholder="0" 
                  className="price-input"
                  value={filters.priceRange.min}
                  onChange={(e) => handlePriceChange('min', e.target.value)}
                />
                <span>-</span>
                <input 
                  type="number" 
                  placeholder="100000" 
                  className="price-input"
                  value={filters.priceRange.max}
                  onChange={(e) => handlePriceChange('max', e.target.value)}
                />
              </div>
            </div>
          </div>
        </>
      ) : (
        <>
          <div className="filters-section">
            <h4>–°—Ç–∞—Ç—É—Å –∑–∞–∫—É–ø–∫–∏</h4>
            <div className="filter-options">
              <label className="filter-option">
                <input 
                  type="checkbox" 
                  checked={filters.procurementStatus.includes('active')}
                  onChange={() => handleStatusChange('active')}
                />
                <span>–ê–∫—Ç–∏–≤–Ω—ã–µ</span>
              </label>
              <label className="filter-option">
                <input 
                  type="checkbox" 
                  checked={filters.procurementStatus.includes('soon')}
                  onChange={() => handleStatusChange('soon')}
                />
                <span>–°–∫–æ—Ä–æ –Ω–∞—á–Ω—É—Ç—Å—è</span>
              </label>
              <label className="filter-option">
                <input 
                  type="checkbox" 
                  checked={filters.procurementStatus.includes('completed')}
                  onChange={() => handleStatusChange('completed')}
                />
                <span>–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ</span>
              </label>
            </div>
          </div>
        </>
      )}
    </aside>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç Footer
function Footer() {
  return (
    <footer className="footer">
      <div className="footer-container">
        <div className="footer-content">
          <div className="footer-section">
            <h4>SpeedOfLight</h4>
            <p>–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞. –ë—ã—Å—Ç—Ä–æ, –±–µ–∑–æ–ø–∞—Å–Ω–æ, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ.</p>
          </div>
          
          <div className="footer-section">
            <h4>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</h4>
            <a href="#">–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è</a>
            <a href="#">–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</a>
            <a href="#">–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</a>
          </div>
          
          <div className="footer-section">
            <h4>–ö–æ–º–ø–∞–Ω–∏—è</h4>
            <a href="#">–û –Ω–∞—Å</a>
            <a href="#">–ö–æ–Ω—Ç–∞–∫—Ç—ã</a>
            <a href="#">–í–∞–∫–∞–Ω—Å–∏–∏</a>
          </div>
          
          <div className="footer-section">
            <h4>–ö–æ–Ω—Ç–∞–∫—Ç—ã</h4>
            <div className="contact-info">
              <p>üõ°Ô∏è +7 (999) 999-99-99</p>
              <p>üõ°Ô∏è hello@speedoflight.ru</p>
              <p>üõ°Ô∏è –ú–æ—Å–∫–≤–∞, —É–ª. –º–∏—Ä–∞, 42</p>
            </div>
          </div>
        </div>
        
        <div className="footer-bottom">
          <div className="footer-bottom-content">
            <p>&copy; 2025 SpeedOfLight</p>
            <div className="footer-links">
              <a href="#">–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</a>
              <a href="#">–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</a>
            </div>
          </div>
        </div>
      </div>
    </footer>
  );
}

export default App;