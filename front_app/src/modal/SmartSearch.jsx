// components/SmartSearch.jsx
import { useState, useEffect, useRef } from 'react';
import { searchAPI } from '../services/api';
import './SmartSearch.css';

function SmartSearch({ onSearch, onSelect, placeholder = "–£–º–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∑–∞–∫—É–ø–æ–∫..." }) {
  const [query, setQuery] = useState('');
  const [suggestions, setSuggestions] = useState([]);
  const [popularSearches, setPopularSearches] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [showSuggestions, setShowSuggestions] = useState(false);
  const inputRef = useRef(null);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadPopularSearches();
  }, []);

  const loadPopularSearches = async () => {
    try {
      const data = await searchAPI.popularSearches();
      setPopularSearches(data.popular_searches || []);
    } catch (error) {
      console.error('Error loading popular searches:', error);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
  const handleQueryChange = async (newQuery) => {
    setQuery(newQuery);
    
    if (newQuery.length < 2) {
      setSuggestions([]);
      setShowSuggestions(true);
      return;
    }

    setIsLoading(true);
    try {
      const data = await searchAPI.autocomplete(newQuery);
      setSuggestions(data.suggestions || []);
      setShowSuggestions(true);
    } catch (error) {
      console.error('Error getting suggestions:', error);
      setSuggestions([]);
    } finally {
      setIsLoading(false);
    }
  };

  // –í—ã–±–æ—Ä –ø–æ–¥—Å–∫–∞–∑–∫–∏
  const handleSuggestionSelect = (suggestion) => {
    setQuery(suggestion.title);
    setShowSuggestions(false);
    
    if (onSelect) {
      onSelect(suggestion);
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
    if (onSearch) {
      onSearch(suggestion.title);
    }
  };

  // –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞
  const handleSearch = (searchQuery = query) => {
    if (!searchQuery.trim()) return;
    
    setShowSuggestions(false);
    if (onSearch) {
      onSearch(searchQuery);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏—à
  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      handleSearch();
    } else if (e.key === 'Escape') {
      setShowSuggestions(false);
    }
  };

  // –û—á–∏—Å—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
  const handleClear = () => {
    setQuery('');
    setSuggestions([]);
    setShowSuggestions(false);
    if (onSearch) {
      onSearch('');
    }
  };

  return (
    <div className="smart-search-container">
      <div className="smart-search-input-wrapper">
        <input
          ref={inputRef}
          type="text"
          className="smart-search-input"
          placeholder={placeholder}
          value={query}
          onChange={(e) => handleQueryChange(e.target.value)}
          onKeyDown={handleKeyPress}
          onFocus={() => setShowSuggestions(true)}
        />
        
        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è */}
        <div className="search-actions">
          {query && (
            <button 
              className="clear-search-btn"
              onClick={handleClear}
              title="–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫"
            >
              ‚úï
            </button>
          )}
          <button 
            className="search-submit-btn"
            onClick={() => handleSearch()}
            disabled={!query.trim() || isLoading}
            title="–ù–∞–π—Ç–∏"
          >
            {isLoading ? '‚åõ' : 'üîç'}
          </button>
        </div>

        {/* –í—ã–ø–∞–¥–∞—é—â–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ */}
        {showSuggestions && (
          <div className="suggestions-dropdown">
            {/* –ü–æ–¥—Å–∫–∞–∑–∫–∏ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è */}
            {suggestions.length > 0 && (
              <div className="suggestions-section">
                <div className="suggestions-header">–ü–æ–¥—Å–∫–∞–∑–∫–∏</div>
                {suggestions.map((suggestion, index) => (
                  <div
                    key={`${suggestion.type}-${suggestion.id}-${index}`}
                    className="suggestion-item"
                    onClick={() => handleSuggestionSelect(suggestion)}
                  >
                    <div className="suggestion-content">
                      <span className="suggestion-text">{suggestion.title}</span>
                      <span className="suggestion-meta">
                        {suggestion.category_name && (
                          <span className="suggestion-category">
                            {suggestion.category_name}
                          </span>
                        )}
                        {suggestion.price && (
                          <span className="suggestion-price">
                            {new Intl.NumberFormat('ru-RU').format(suggestion.price)} ‚ÇΩ
                          </span>
                        )}
                      </span>
                    </div>
                    <div className="suggestion-type">{suggestion.type}</div>
                  </div>
                ))}
              </div>
            )}

            {/* –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã */}
            {suggestions.length === 0 && popularSearches.length > 0 && (
              <div className="suggestions-section">
                <div className="suggestions-header">–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã</div>
                {popularSearches.map((search, index) => (
                  <div
                    key={`popular-${index}`}
                    className="suggestion-item popular-search"
                    onClick={() => handleSuggestionSelect({ title: search })}
                  >
                    <div className="suggestion-content">
                      <span className="suggestion-text">{search}</span>
                      <span className="suggestion-meta">
                        <span className="popular-badge">–ü–æ–ø—É–ª—è—Ä–Ω–æ</span>
                      </span>
                    </div>
                  </div>
                ))}
              </div>
            )}

            {/* –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ */}
            {suggestions.length === 0 && popularSearches.length === 0 && query.length >= 2 && (
              <div className="no-suggestions">
                –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
}

export default SmartSearch;