import pandas as pd
import numpy as np
import json
import torch
from transformers import AutoTokenizer, AutoModel
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import re
from collections import defaultdict, Counter
import warnings
warnings.filterwarnings('ignore')

class FixedProcurementRecommender:
    def __init__(self, templates_path, analysis_path, products_path, procurement_examples=None):
        self.templates = self._load_json(templates_path)
        self.analysis = self._load_json(analysis_path)
        self.products_df = self._load_products_fixed(products_path)
        self.procurement_examples = procurement_examples or []
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
        self.tokenizer = AutoTokenizer.from_pretrained('cointegrated/rubert-tiny2')
        self.bert_model = AutoModel.from_pretrained('cointegrated/rubert-tiny2')
        self.device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
        self.bert_model.to(self.device)
        self.bert_model.eval()
        
        self.tfidf_vectorizer = TfidfVectorizer(
            min_df=1, max_df=0.9, ngram_range=(1, 2), max_features=1000
        )
        
        # –°—Ç—Ä–æ–∏–º –∫–∞—Ç–∞–ª–æ–≥ –∏ –º–æ–¥–µ–ª–∏
        self._build_enhanced_catalog()
        self._build_similarity_models()
        
        print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {len(self.product_catalog)} —Ç–æ–≤–∞—Ä–æ–≤")

    def _load_json(self, path):
        with open(path, 'r', encoding='utf-8') as f:
            return json.load(f)

    def _load_products_fixed(self, products_path):
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CSV —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
            try:
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º |
                df = pd.read_csv(products_path, encoding='utf-8-sig', sep='|', header=None, 
                               on_bad_lines='skip', low_memory=False)
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º |: {len(df)} —Å—Ç—Ä–æ–∫")
            except:
                try:
                    # –ü—Ä–æ–±—É–µ–º —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º ;
                    df = pd.read_csv(products_path, encoding='utf-8-sig', sep=';', header=None,
                                   on_bad_lines='skip', low_memory=False)
                    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º ;: {len(df)} —Å—Ç—Ä–æ–∫")
                except:
                    # –ü—Ä–æ–±—É–µ–º —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
                    df = pd.read_csv(products_path, encoding='utf-8-sig', header=None,
                                   on_bad_lines='skip', low_memory=False, engine='python')
                    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º: {len(df)} —Å—Ç—Ä–æ–∫")
            
            # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            df = df.dropna(how='all')  # –£–¥–∞–ª—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            df = df.reset_index(drop=True)
            
            print(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} –∫–æ–ª–æ–Ω–æ–∫")
            if len(df) > 0:
                print(f"üìã –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏: {df.iloc[0].tolist()}")
            
            return df
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
            return self._create_test_data()

    def _create_test_data(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è"""
        print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        test_data = []
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–∫—É–ø–æ–∫
        test_products = [
            {'id': '35482269', 'name': '–†—É—á–∫–∞ —à–∞—Ä–∏–∫–æ–≤–∞—è —Å–∏–Ω—è—è', 'category': '–ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è', 'price': 50.0},
            {'id': '36575879', 'name': '–ë—É–º–∞–≥–∞ –æ—Ñ–∏—Å–Ω–∞—è –ê4', 'category': '–ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è', 'price': 300.0},
            {'id': '38461536', 'name': '–°—Ä–µ–¥—Å—Ç–≤–æ —á–∏—Å—Ç—è—â–µ–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ', 'category': '–•–æ–∑—Ç–æ–≤–∞—Ä—ã', 'price': 450.0},
            {'id': '1256880', 'name': '–ú—ã–ª–æ –∂–∏–¥–∫–æ–µ –∞–Ω—Ç–∏–±–∞–∫—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ', 'category': '–•–æ–∑—Ç–æ–≤–∞—Ä—ã', 'price': 280.0},
            {'id': '1227473', 'name': '–°–∫—Ä–µ–ø–∫–∏ –∫–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–µ', 'category': '–ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è', 'price': 80.0},
            {'id': '38461610', 'name': '–ú–æ—é—â–µ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ –¥–ª—è —É–±–æ—Ä–∫–∏', 'category': '–•–æ–∑—Ç–æ–≤–∞—Ä—ã', 'price': 520.0},
        ]
        
        for product in test_products:
            test_data.append([
                product['id'], product['name'], product['category'], '', '—à—Ç', 
                json.dumps({'–û–±—ä–µ–º': '—Å—Ç–∞–Ω–¥–∞—Ä—Ç', '–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ': '–æ—Ñ–∏—Å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ'}), 
                product['price'], 't'
            ])
        
        return pd.DataFrame(test_data)

    def _build_enhanced_catalog(self):
        """–°—Ç—Ä–æ–∏—Ç –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö"""
        print("üì¶ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤...")
        
        self.product_catalog = {}
        self.available_products = set()
        self.category_products = defaultdict(list)
        
        if self.products_df is None or len(self.products_df) == 0:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞")
            return
        
        successful_parses = 0
        
        for idx, row in self.products_df.iterrows():
            try:
                product_data = self._parse_product_row(row)
                if product_data:
                    product_id = product_data['id']
                    self.product_catalog[product_id] = product_data
                    
                    if product_data.get('available', False):
                        self.available_products.add(product_id)
                    
                    category = product_data['category']
                    self.category_products[category].append(product_id)
                    successful_parses += 1
                    
            except Exception as e:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {successful_parses} —Ç–æ–≤–∞—Ä–æ–≤")
        print(f"üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {list(self.category_products.keys())}")

    def _parse_product_row(self, row):
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —Å —Ç–æ–≤–∞—Ä–æ–º –∏–∑ DataFrame"""
        try:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 8 –∫–æ–ª–æ–Ω–æ–∫ (–º–∞–∫—Å–∏–º—É–º —á—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å)
            values = [str(row[i]) if i < len(row) and pd.notna(row[i]) else '' for i in range(8)]
            
            product_id = values[0].strip()
            if not product_id or product_id == 'nan':
                product_id = f"auto_{hash(str(values)) % 100000}"
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
            name = values[1].strip() if len(values) > 1 else f"–¢–æ–≤–∞—Ä {product_id}"
            if not name or name == 'nan':
                name = f"–¢–æ–≤–∞—Ä {product_id}"
            
            # –ü–∞—Ä—Å–∏–º –∞—Ç—Ä–∏–±—É—Ç—ã
            attributes = {}
            if len(values) > 5 and values[5].strip() and values[5] != 'nan':
                attributes = self._parse_attributes(values[5])
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            category = self._determine_category(name, attributes)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É
            price = 0.0
            if len(values) > 6 and values[6].strip() and values[6] != 'nan':
                try:
                    price = float(values[6])
                except:
                    price = self._estimate_price(category, name)
            else:
                price = self._estimate_price(category, name)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            available = False
            if len(values) > 7 and values[7].strip() and values[7] != 'nan':
                available = values[7].strip().lower() in ['t', 'true', '1', 'y', 'yes']
            
            return {
                'id': product_id,
                'name': name,
                'category': category,
                'price': price,
                'attributes': attributes,
                'available': available,
                'description': self._generate_description(name, category, attributes)
            }
            
        except Exception as e:
            return None

    def _parse_attributes(self, attr_str):
        """–ü–∞—Ä—Å–∏—Ç –∞—Ç—Ä–∏–±—É—Ç—ã —Ç–æ–≤–∞—Ä–∞"""
        try:
            if isinstance(attr_str, str) and attr_str.strip():
                # –ü—Ä–æ–±—É–µ–º –∫–∞–∫ JSON
                try:
                    return json.loads(attr_str)
                except:
                    # –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞
                    attrs = {}
                    # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–∏–ø–∞ "–∫–ª—é—á": "–∑–Ω–∞—á–µ–Ω–∏–µ"
                    patterns = [
                        r'"([^"]+)"\s*:\s*"([^"]*)"',
                        r'"([^"]+)"\s*:\s*([^,}]+)',
                        r'(\w+)\s*:\s*"([^"]*)"',
                        r'(\w+)\s*:\s*([^,\n]+)'
                    ]
                    
                    for pattern in patterns:
                        matches = re.findall(pattern, attr_str)
                        for key, value in matches:
                            attrs[key.strip()] = value.strip()
                    
                    return attrs
        except:
            pass
        return {}

    def _determine_category(self, name, attributes):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞"""
        name_lower = name.lower()
        attrs_str = str(attributes).lower()
        
        category_keywords = {
            '–ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è': ['—Ä—É—á–∫–∞', '–∫–∞—Ä–∞–Ω–¥–∞—à', '–±—É–º–∞–≥–∞', '–±–ª–æ–∫–Ω–æ—Ç', '–∫–ª–µ–π', '–ª–∞—Å—Ç–∏–∫', '—Å—Ç–µ–ø–ª–µ—Ä', 
                          '—Å–∫—Ä–µ–ø–∫', '–ø–∞–ø–∫–∞', '—Ñ–∞–π–ª', '–º–∞—Ä–∫–µ—Ä', '—Ç–µ—Ç—Ä–∞–¥—å', '—Å–∫–æ—Ç—á', '–ª–∏–Ω–µ–π–∫–∞'],
            '–•–æ–∑—Ç–æ–≤–∞—Ä—ã': ['–º–æ—é—â–µ–µ', '—á–∏—Å—Ç—è—â', '–º—ã–ª–æ', '–¥–µ–∑–∏–Ω—Ñ–∏—Ü–∏—Ä—É—é—â', '–±–µ–ª—å–Ω–∏—Ü', '–≥–µ–ª—å', 
                         '—Å—Ä–µ–¥—Å—Ç–≤–æ', '–ø–æ—Ä–æ—à–æ–∫', '–∂–∏–¥–∫–æ—Å—Ç—å', '–æ—Ç–±–µ–ª–∏–≤–∞', '–ø—è—Ç–Ω–æ–≤—ã–≤–æ–¥–∏—Ç–µ–ª—å'],
            '–û—Ñ–∏—Å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞': ['–ø—Ä–∏–Ω—Ç–µ—Ä', '—Å–∫–∞–Ω–µ—Ä', '–º—Ñ—É', '–∫–∞—Ä—Ç—Ä–∏–¥–∂', '—Ç–æ–Ω–µ—Ä', '–∫–æ–ø–∏—Ä', '—Ñ–∞–∫—Å'],
            'IT –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ': ['–∫–æ–º–ø—å—é—Ç–µ—Ä', '–Ω–æ—É—Ç–±—É–∫', '—Å–µ—Ä–≤–µ—Ä', '—Ä–æ—É—Ç–µ—Ä', '–º–æ–Ω–∏—Ç–æ—Ä', '–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞', '–º—ã—à—å'],
            '–ú–µ–±–µ–ª—å': ['—Å—Ç–æ–ª', '–∫—Ä–µ—Å–ª–æ', '—Å—Ç—É–ª', '—à–∫–∞—Ñ', '–º–µ–±–µ–ª—å', '–¥–∏–≤–∞–Ω', '–ø–æ–ª–∫–∞', '—Å—Ç–µ–ª–ª–∞–∂'],
            '–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã': ['–∫—Ä–∞—Å–∫–∞', '–ª–∞–∫', '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç', '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω', '–∫–∏—Å—Ç—å', '–≤–∞–ª–∏–∫', '—à–ø–∞—Ç–µ–ª—å'],
            '–ë—ã—Ç–æ–≤–∞—è —Ö–∏–º–∏—è': ['—Ö–∏–º–∏—è', '–æ—Å–≤–µ–∂–∏—Ç–µ–ª—å', '—Å—Ä–µ–¥—Å—Ç–≤–æ –¥–ª—è', '–æ—á–∏—Å—Ç–∏—Ç–µ–ª—å'],
            '–£–±–æ—Ä–æ—á–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å': ['—à–≤–∞–±—Ä–∞', '–≤–µ–¥—Ä–æ', '—Å–æ–≤–æ–∫', '—â–µ—Ç–∫–∞', '–ø–µ—Ä—á–∞—Ç–∫', '–∏–Ω–≤–µ–Ω—Ç–∞—Ä', '—Ç—Ä—è–ø–∫']
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        for category, keywords in category_keywords.items():
            if any(keyword in name_lower for keyword in keywords):
                return category
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
        for category, keywords in category_keywords.items():
            if any(keyword in attrs_str for keyword in keywords):
                return category
        
        return '–†–∞–∑–Ω–æ–µ'

    def _estimate_price(self, category, name):
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞"""
        base_prices = {
            '–ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è': 120,
            '–•–æ–∑—Ç–æ–≤–∞—Ä—ã': 380,
            '–û—Ñ–∏—Å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞': 7500,
            'IT –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ': 12500,
            '–ú–µ–±–µ–ª—å': 4500,
            '–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã': 950,
            '–ë—ã—Ç–æ–≤–∞—è —Ö–∏–º–∏—è': 280,
            '–£–±–æ—Ä–æ—á–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å': 650,
            '–†–∞–∑–Ω–æ–µ': 400
        }
        
        price = base_prices.get(category, 400)
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        name_lower = name.lower()
        if any(word in name_lower for word in ['–ø—Ä–µ–º–∏—É–º', '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å', 'professional']):
            price *= 1.5
        elif any(word in name_lower for word in ['—ç–∫–æ–Ω–æ–º', '–±—é–¥–∂–µ—Ç', '—Å—Ç–∞–Ω–¥–∞—Ä—Ç']):
            price *= 0.7
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ–±—ä–µ–º
        volume = self._extract_volume_from_name(name)
        if volume > 1000:
            price *= 2.5
        elif volume > 500:
            price *= 1.8
        elif volume > 0:
            price *= (volume / 200)  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        
        return round(price, 2)

    def _extract_volume_from_name(self, name):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–±—ä–µ–º –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        name_lower = name.lower()
        
        volume_patterns = [
            r'(\d+)\s*–º–ª', r'(\d+)\s*–ª', r'(\d+)\s*–≥', r'(\d+)\s*–∫–≥',
            r'(\d+)\s*ml', r'(\d+)\s*l', r'(\d+)\s*g', r'(\d+)\s*kg'
        ]
        
        for pattern in volume_patterns:
            matches = re.findall(pattern, name_lower)
            if matches:
                try:
                    volume = float(matches[0])
                    if '–∫–≥' in name_lower or 'kg' in name_lower:
                        volume *= 1000
                    elif '–ª' in name_lower or 'l' in name_lower:
                        volume *= 1000
                    return volume
                except:
                    continue
        
        return 0

    def _generate_description(self, name, category, attributes):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤"""
        description_parts = [name, category]
        
        if attributes:
            important_attrs = ['–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ', '–û–±—ä–µ–º', '–¢–∏–ø', '–§–æ—Ä–º–∞', '–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ü–∏—è', '–í–∏–¥']
            for attr in important_attrs:
                if attr in attributes:
                    description_parts.append(f"{attr}: {attributes[attr]}")
        
        return ". ".join(description_parts)

    def _build_similarity_models(self):
        """–°—Ç—Ä–æ–∏—Ç –º–æ–¥–µ–ª–∏ —Å—Ö–æ–∂–µ—Å—Ç–∏"""
        print("üîç –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π —Å—Ö–æ–∂–µ—Å—Ç–∏...")
        
        # TF-IDF
        product_descriptions = []
        self.product_ids = []
        
        for product_id, info in self.product_catalog.items():
            description = f"{info['name']} {info['category']} {info['description']}"
            product_descriptions.append(description)
            self.product_ids.append(product_id)
        
        if product_descriptions:
            self.tfidf_matrix = self.tfidf_vectorizer.fit_transform(product_descriptions)
            self.tfidf_similarity = cosine_similarity(self.tfidf_matrix)
            self.product_to_index = {pid: idx for idx, pid in enumerate(self.product_ids)}
            print(f"‚úÖ TF-IDF: –º–∞—Ç—Ä–∏—Ü–∞ {self.tfidf_matrix.shape}")
        else:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è TF-IDF")
            
        # BERT —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        self.bert_embeddings = {}
        print("‚úÖ –ú–æ–¥–µ–ª–∏ —Å—Ö–æ–∂–µ—Å—Ç–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω—ã")

    def smart_recommendation(self, user_input, budget=50000, user_role="office_manager"):
        """
        –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        print(f"\nüéØ –ó–ê–ü–†–û–°: {user_input}")
        print(f"üí∞ –ë—é–¥–∂–µ—Ç: {budget:,} —Ä—É–±.")
        print(f"üë§ –†–æ–ª—å: {user_role}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        categories = self._extract_categories_from_input(user_input)
        print(f"üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {categories}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = self._get_recommendations_by_categories(categories, budget)
        
        return self._format_recommendations(recommendations, user_input, budget)

    def _extract_categories_from_input(self, user_input):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
        input_lower = user_input.lower()
        categories = set()
        
        category_mapping = {
            '–ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è': ['–∫–∞–Ω—Ü–µ–ª—è—Ä', '—Ä—É—á–∫', '–∫–∞—Ä–∞–Ω–¥–∞—à', '–±—É–º–∞–≥', '–±–ª–æ–∫–Ω–æ—Ç', '—Å–∫—Ä–µ–ø–∫', '—Å—Ç–µ–ø–ª–µ—Ä', '–ø–∞–ø–∫', '–º–∞—Ä–∫–µ—Ä'],
            '–•–æ–∑—Ç–æ–≤–∞—Ä—ã': ['–º–æ—é—â', '—á–∏—Å—Ç—è—â', '–¥–µ–∑–∏–Ω—Ñ–∏—Ü–∏—Ä', '—Ö–∏–º–∏—è', '–±–µ–ª—å–Ω–∏—Ü', '–º—ã–ª–æ', '–ø–æ—Ä–æ—à–æ–∫', '–≥–µ–ª—å'],
            '–û—Ñ–∏—Å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞': ['–æ—Ä–≥—Ç–µ—Ö–Ω–∏–∫', '–ø—Ä–∏–Ω—Ç–µ—Ä', '—Å–∫–∞–Ω–µ—Ä', '–∫—Å–µ—Ä–æ–∫—Å', '–º—Ñ—É', '–∫–∞—Ä—Ç—Ä–∏–¥–∂'],
            '–ú–µ–±–µ–ª—å': ['–º–µ–±–µ–ª—å', '—Å—Ç–æ–ª', '–∫—Ä–µ—Å–ª–æ', '—Å—Ç—É–ª', '—à–∫–∞—Ñ'],
            '–ë—ã—Ç–æ–≤–∞—è —Ö–∏–º–∏—è': ['—Ö–∏–º–∏—è', '–æ—Ç–±–µ–ª–∏–≤–∞', '–ø—è—Ç–Ω–æ–≤—ã–≤–æ–¥–∏—Ç–µ–ª—å', '–æ—Å–≤–µ–∂–∏—Ç–µ–ª—å'],
        }
        
        for category, keywords in category_mapping.items():
            if any(keyword in input_lower for keyword in keywords):
                categories.add(category)
        
        return list(categories) if categories else ['–ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è', '–•–æ–∑—Ç–æ–≤–∞—Ä—ã']  # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    def _get_recommendations_by_categories(self, categories, budget):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        recommendations = []
        
        for category in categories:
            category_products = self.category_products.get(category, [])
            
            for product_id in category_products[:10]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10 –∏–∑ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                product_info = self.product_catalog[product_id]
                
                # –ü—Ä–æ—Å—Ç–æ–π scoring
                score = 0.7
                if product_info['available']:
                    score += 0.2
                
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–µ–Ω–µ
                price_ratio = product_info['price'] / (budget / 8)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 8 —Ç–æ–≤–∞—Ä–æ–≤
                if price_ratio <= 0.3:
                    score += 0.1
                
                recommendations.append({
                    'product_id': product_id,
                    'category': category,
                    'score': min(score, 1.0),
                    'price': product_info['price'],
                    'product_info': product_info
                })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ –±—é–¥–∂–µ—Ç—É
        sorted_recs = sorted(recommendations, key=lambda x: x['score'], reverse=True)
        return self._optimize_budget(sorted_recs, budget)

    def _optimize_budget(self, recommendations, budget):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –ø–æ–¥ –±—é–¥–∂–µ—Ç"""
        selected = []
        current_cost = 0
        
        for rec in recommendations:
            if current_cost + rec['price'] <= budget:
                selected.append(rec)
                current_cost += rec['price']
            if len(selected) >= 15:  # –ú–∞–∫—Å–∏–º—É–º 15 —Ç–æ–≤–∞—Ä–æ–≤
                break
        
        return selected

    def _format_recommendations(self, recommendations, user_input, budget):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        total_cost = sum(rec['price'] for rec in recommendations)
        categories_covered = list(set(rec['category'] for rec in recommendations))
        
        result = {
            'query': user_input,
            'budget': budget,
            'total_recommendations': len(recommendations),
            'total_cost': total_cost,
            'budget_utilization': f"{(total_cost / budget * 100):.1f}%" if budget > 0 else "N/A",
            'categories_covered': categories_covered,
            'recommendations': []
        }
        
        for i, rec in enumerate(recommendations, 1):
            product_info = rec['product_info']
            
            recommendation = {
                'rank': i,
                'product_id': rec['product_id'],
                'name': product_info['name'],
                'category': rec['category'],
                'price': product_info['price'],
                'availability': '‚úÖ –í –Ω–∞–ª–∏—á–∏–∏' if product_info['available'] else '‚ö†Ô∏è –ü–æ–¥ –∑–∞–∫–∞–∑',
                'score': round(rec['score'], 3),
                'reason': self._generate_simple_reason(rec)
            }
            
            result['recommendations'].append(recommendation)
        
        return result

    def _generate_simple_reason(self, recommendation):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ"""
        reasons = []
        
        if recommendation['score'] > 0.8:
            reasons.append("–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç")
        
        if recommendation['product_info']['available']:
            reasons.append("–ë—ã—Å—Ç—Ä–∞—è –ø–æ—Å—Ç–∞–≤–∫–∞")
        
        if recommendation['price'] < 1000:
            reasons.append("–•–æ—Ä–æ—à–∞—è —Ü–µ–Ω–∞")
        
        return ", ".join(reasons) if reasons else "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ"

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
def quick_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã"""
    print("üöÄ –ó–ê–ü–£–°–ö –ë–´–°–¢–†–û–ì–û –¢–ï–°–¢–ê –°–ò–°–¢–ï–ú–´")
    print("=" * 60)
    
    try:
        recommender = FixedProcurementRecommender(
            templates_path='clean_data/procurement_templates.json',
            analysis_path='clean_data/procurement_analysis_report.json',
            products_path='ML/344608_–°–¢–ï.csv'
        )
        
        # –¢–µ—Å—Ç 1: –ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è
        print("\n1. üìù –¢–ï–°–¢: –ö–ê–ù–¶–ï–õ–Ø–†–ò–Ø –î–õ–Ø –û–§–ò–°–ê")
        result1 = recommender.smart_recommendation(
            user_input="–ù—É–∂–Ω—ã —Ä—É—á–∫–∏, –±—É–º–∞–≥–∞ –∏ —Å–∫—Ä–µ–ø–∫–∏ –¥–ª—è –æ—Ñ–∏—Å–∞",
            budget=25000,
            user_role="office_manager"
        )
        _print_simple_result(result1)
        
        # –¢–µ—Å—Ç 2: –•–æ–∑—Ç–æ–≤–∞—Ä—ã
        print("\n2. üßΩ –¢–ï–°–¢: –ú–û–Æ–©–ò–ï –°–†–ï–î–°–¢–í–ê")
        result2 = recommender.smart_recommendation(
            user_input="–ú–æ—é—â–∏–µ –∏ –¥–µ–∑–∏–Ω—Ñ–∏—Ü–∏—Ä—É—é—â–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è —É–±–æ—Ä–∫–∏",
            budget=35000,
            user_role="cleaner"
        )
        _print_simple_result(result2)
        
        # –¢–µ—Å—Ç 3: –°–º–µ—à–∞–Ω–Ω–∞—è –∑–∞–∫—É–ø–∫–∞
        print("\n3. üè¢ –¢–ï–°–¢: –û–§–ò–°–ù–´–ï –¢–û–í–ê–†–´")
        result3 = recommender.smart_recommendation(
            user_input="–í—Å–µ –¥–ª—è –æ—Ñ–∏—Å–∞: –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—è –∏ —Ö–æ–∑—Ç–æ–≤–∞—Ä—ã",
            budget=50000,
            user_role="office_manager"
        )
        _print_simple_result(result3)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()

def _print_simple_result(result):
    """–ü—Ä–æ—Å—Ç–æ–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    print(f"üì¶ –ó–∞–ø—Ä–æ—Å: {result['query']}")
    print(f"üí∞ –ë—é–¥–∂–µ—Ç: {result['budget']:,} —Ä—É–±.")
    print(f"üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {result['total_recommendations']}")
    print(f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {result['total_cost']:,.0f} —Ä—É–±. ({result['budget_utilization']})")
    print(f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(result['categories_covered'])}")
    
    print("\n–¢–æ–ø-5 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:")
    for rec in result['recommendations'][:5]:
        print(f"  {rec['rank']:2d}. {rec['name']} - {rec['price']:,.0f} —Ä—É–±. ({rec['availability']})")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    quick_test()